{"mappings":"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C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,I,O,M,c,M,M,M,I,U,yB,O,K;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,+B,a,U,U,S,C,E,C;I,I,I,O,W,c,C,C,O,S;I,I,C,G,O;I,I,I,E,K,I,G,K,E,E;I,I;Q,M,A,C,M,K,K,M,C,K,C,A,C,I,E,M,E,K,G,K,E;I,E,O,O;Q,I;Y,O;Q;I,S;Q,I;Y,I,K,C,E,Q,C,I,C,C,S,A,G,E,K;Q,S;Y,I,G,M,E;Q;I;I,O;A;A,I,sC,a,U,iB,S,E,E,I,E,I;I,I,Q,U,W,G;Q,I,I,I,G,I,K,Q,I,I,G,I,I,M,C,C,K,I,G;Y,I,C,I,K,M,U,M,K,M,G;Y,E,C,E,G,I,C,E;Q;I;I,O,G,O,M,M,U,M,K;A;A,I,iC,a,U,Y,S,C;I,I,I,O,W,c,O,U,I,K,C,C,E,E,I;I,I,G,O,E,K;I,I,K,O,E,W,U,O;Q,M;Y,I,K,K,E,Q,I,K;Y,O;gB,O,K,C,C,I;gB,M,C;Y;Q;I;I,M,I,U,I,4B;A;AFK5B;;;CAGG,GACH,IAAA,4CAAA,WAAA,GAAA,SAAA,MAAA;IAA4B,gCAAA,QAAA;IAQ3B,SAAA,OACC,MAAW,EACX,IAAY,EACZ,IAAY,EACZ,IAAY,EACZ,GAAW,EACM,YAA2B;QAA3B,IAAA,iBAAA,KAAA,GAAA,eAAA;QANlB,IAAA,QAQC,OAAA,KAAA,IAAA,KAAO,IAAA;QAFU,MAAA,eAAA;QAbV,MAAA,gBAAyB;QAEzB,MAAA,iBAAgC,EAAE;QAezC,IAAM,aAAa,SAAS,WAAW;QAEvC,MAAK,WAAW,aAAa,OAAO,MAAM,OAAO,OAAO,gBAAgB;Q,O;IACzE;IAEA,OAAA,UAAA,QAAA,SAAM,EAAU,EAAE,KAAa;QAA/B,IAAA,QAAA,IAAA;QACC,IAAI,CAAC,MAAM;QAEX,IAAM,QAAQ,GAAA,OAAG,IAAI,CAAC,UAAQ,QAAA,OAAO,IAAE,WAAA,OAAU;QAEjD,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAC3B;QAGD,IAAI,CAAC,UAAU,IAAI,UAAU,QAAQ,cAAc,CAAA,GAAA,iCAAA;QACnD,IAAI,CAAC,gBAAgB;QAErB,IAAI,CAAC,QAAQ,YAAY,SAAC,KAAK;YAC9B,IAAI;YAEJ,IAAI;gBACH,OAAO,KAAK,MAAM,MAAM;gBACxB,CAAA,GAAA,iCAAA,EAAO,IAAI,4BAA4B;YACvC,EAAC,OAAO,GAAG;gBACX,CAAA,GAAA,iCAAA,EAAO,IAAI,0BAA0B,MAAM;gBAC3C;YACA;YAED,MAAK,KAAK,CAAA,GAAA,yCAAA,EAAgB,SAAS;QACpC;QAEA,IAAI,CAAC,QAAQ,UAAU,SAAC,KAAK;YAC5B,IAAI,MAAK,eACR;YAGD,CAAA,GAAA,iCAAA,EAAO,IAAI,kBAAkB;YAE7B,MAAK;YACL,MAAK,gBAAgB;YAErB,MAAK,KAAK,CAAA,GAAA,yCAAA,EAAgB;QAC3B;QAEA,8EAA8E;QAC9E,kBAAkB;QAClB,IAAI,CAAC,QAAQ,SAAS;YACrB,IAAI,MAAK,eACR;YAGD,MAAK;YAEL,CAAA,GAAA,iCAAA,EAAO,IAAI;YAEX,MAAK;QACN;IACD;IAEQ,OAAA,UAAA,qBAAR;QAAA,IAAA,QAAA,IAAA;QACC,IAAI,CAAC,eAAe,WAAW;YAC9B,MAAK;QACN,GAAG,IAAI,CAAC;IACT;IAEQ,OAAA,UAAA,iBAAR;QACC,IAAI,CAAC,IAAI,CAAC,WAAW;YACpB,CAAA,GAAA,iCAAA,EAAO,IAAI;YACX;QACA;QAED,IAAM,UAAU,KAAK,UAAU;YAAE,MAAM,CAAA,GAAA,yCAAA,EAAkB;QAAS;QAElE,IAAI,CAAC,QAAS,KAAK;QAEnB,IAAI,CAAC;IACN;IAEA,qCAAA,GACQ,OAAA,UAAA,UAAR;QACC,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ,eAAe;IACtD;IAEA,0BAAA,GACQ,OAAA,UAAA,sBAAR;Q,I,K;QACC,oCAAoC;QACpC,0EAA0E;QAC1E,IAAM,cAAW,oCAAA,EAAA,EAAA,6BAAO,IAAI,CAAC,iBAAc;QAC3C,IAAI,CAAC,iBAAiB,EAAE;Q,I;YAExB,IAAsB,IAAA,gBAAA,+BAAA,cAAW,kBAAA,cAAA,QAAA,CAAA,gBAAA,MAAA,kBAAA,cAAA,OAAE;gBAA9B,IAAM,UAAO,gBAAA;gBACjB,IAAI,CAAC,KAAK;YACV;Q,E,O,O;Y,M;gB,O;Y;Q,S;Y,I;gB,I,mB,C,gB,Q,C,K,c,M,G,G,K;Y,S;gB,I,K,M,I;Y;Q;IACF;IAEA,gCAAA,GACA,OAAA,UAAA,OAAA,SAAK,IAAS;QACb,IAAI,IAAI,CAAC,eACR;QAGD,4EAA4E;QAC5E,qBAAqB;QACrB,IAAI,CAAC,IAAI,CAAC,KAAK;YACd,IAAI,CAAC,eAAe,KAAK;YACzB;QACA;QAED,IAAI,CAAC,KAAK,MAAM;YACf,IAAI,CAAC,KAAK,CAAA,GAAA,yCAAA,EAAgB,OAAO;YACjC;QACA;QAED,IAAI,CAAC,IAAI,CAAC,WACT;QAGD,IAAM,UAAU,KAAK,UAAU;QAE/B,IAAI,CAAC,QAAS,KAAK;IACpB;IAEA,OAAA,UAAA,QAAA;QACC,IAAI,IAAI,CAAC,eACR;QAGD,IAAI,CAAC;QAEL,IAAI,CAAC,gBAAgB;IACtB;IAEQ,OAAA,UAAA,WAAR;QACC,IAAI,IAAI,CAAC,SAAS;YACjB,IAAI,CAAC,QAAQ,SACZ,IAAI,CAAC,QAAQ,YACb,IAAI,CAAC,QAAQ,UACZ;YACF,IAAI,CAAC,QAAQ;YACb,IAAI,CAAC,UAAU;QACf;QAED,aAAa,IAAI,CAAC;IACnB;IACD,OAAA;AAAA,EAlK4B,CAAA,GAAA,sCAAA;;;;;;;;;;;;;;A,I,iC,a,U,Y;I,iC,O,U,S,C;Q,I,I,G,I,G,I,U,Q,I,G,I;Y,I,S,C,E;Y,I,I,K,E,I,O,U,e,K,G,I,C,C,E,G,C,C,E;Q;Q,O;I;I,O,+B,M,I,E;A;A,I,kC,a,U,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,oC,a,U,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,K,C,I,G,E,C,E,I,C,I,C,C,G,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;AID5B;;CAEG,GACH,IAAA,2CAAA,WAAA,GAAA;IAIC,SAAA,WAAqB,UAAa;QAAb,IAAA,CAAA,aAAA;IAAgB;IAErC,wEAAA,GACA,WAAA,UAAA,kBAAA,SAAgB,OAAY;QAC3B,IAAM,iBAAiB,IAAI,CAAC;QAE5B,2BAA2B;QAC3B,IAAI,CAAC,WAAW,iBAAiB;QAEjC,IAAI,IAAI,CAAC,WAAW,SAAS,CAAA,GAAA,yCAAA,EAAe,SAAS,QAAQ,SAC5D,IAAI,CAAC,uBAAuB,QAAQ,SAAS;QAG9C,6BAA6B;QAC7B,IAAI,QAAQ,YAAY;YACvB,IAAI,IAAI,CAAC,WAAW,SAAS,CAAA,GAAA,yCAAA,EAAe,MAAM;gBACjD,IAAM,iBAA2C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ACzC,CAAA,GAAA,iCAAA,EAAO,IAAI,+BAA+B;wB,O;4B,E,O;4B;yB;oB,K;wB,O;4B,E,Q;yB;gB;Y;Q;IAE3C;IAEO,WAAA,UAAA,yBAAR,SACC,MAAmB,EACnB,cAAiC;QAEjC,CAAA,GAAA,iCAAA,EAAO,IAAI,0BAAA,OAA0B,OAAO,IAAE;QAE9C,IAAI,CAAC,eAAe,UACnB,OAAO,CAAA,GAAA,iCAAA,EAAO,MACb;QAIF,OAAO,YAAY,QAAQ,SAAC,KAAK;YAChC,eAAe,SAAS,OAAO;QAChC;IACD;IAEQ,WAAA,UAAA,8BAAR,SACC,MAAmB,EACnB,eAAgC;QAEhC,CAAA,GAAA,iCAAA,EAAO,IACN,cAAA,OAAc,OAAO,IAAE,yBAAA,OAAwB,gBAAgB;QAGhE,gBAAgB,UAAU;IAC3B;IACD,OAAA;AAAA;;;;;;;;A,I,kC,a,U,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,O,U,e,K,G,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,I,O,M,c,M,M,M,I,U,yB,O,K;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;ACtWA,IAAA,4CAAA,WAAA,GAAA,SAAA,MAAA;IAEU,gCAAA,gBAAA;IAsBT,SAAA,eACC;;KAEG,GACM,IAAY,EACd,QAAc,EACZ,OAAY;QANtB,IAAA,QAQC,OAAA,KAAA,IAAA,KAAO,IAAA;QAJE,MAAA,OAAA;QACF,MAAA,WAAA;QACE,MAAA,UAAA;QA3BA,MAAA,QAAQ;QA+BjB,MAAK,WAAW,QAAQ;Q,O;IACzB;IAfA,OAAA,eAAI,eAAA,WAAA,QAAJ;QAJA;;;SAGG,GACH,KAAA;YACC,OAAO,IAAI,CAAC;QACb;Q,Y;Q,c;IAAC;IAqBF,OAAA;AAAA,EAzCU,CAAA,GAAA,sCAAA;;;A,I,kC,a,U,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,O,U,e,K,G,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,I,O,M,c,M,M,M,I,U,yB,O,K;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,iC,a,U,Y;I,iC,O,U,S,C;Q,I,I,G,I,G,I,U,Q,I,G,I;Y,I,S,C,E;Y,I,I,K,E,I,O,U,e,K,G,I,C,C,E,G,C,C,E;Q;Q,O;I;I,O,+B,M,I,E;A;A,I,iC,a,U,Y,S,C;I,I,I,O,W,c,O,U,I,K,C,C,E,E,I;I,I,G,O,E,K;I,I,K,O,E,W,U,O;Q,M;Y,I,K,K,E,Q,I,K;Y,O;gB,O,K,C,C,I;gB,M,C;Y;Q;I;I,M,I,U,I,4B;A;AFLV;;;CAGG,GACH,IAAA,4CAAA,WAAA,GAAA,SAAA,MAAA;IAAqC,gCAAA,iBAAA;IAqBpC,SAAA,gBAAY,MAAc,EAAE,QAAc,EAAE,OAAY;QAAxD,IAAA,QACC,OAAA,KAAA,IAAA,EAAM,QAAQ,UAAU,YAAQ,IAAA;QAEhC,MAAK,eAAe,MAAK,QAAQ;QACjC,MAAK,eACJ,MAAK,QAAQ,gBACb,gBAAgB,YAAY,CAAA,GAAA,yCAAA,EAAK;QAElC,MAAK,cAAc,IAAI,CAAA,GAAA,oCAAA,EAAW;QAElC,IAAI,MAAK,cACR,MAAK,YAAY,gBAAgB;YAChC,SAAS,MAAK;YACd,YAAY;QACZ;Q,O;IAEH;IA3BA,OAAA,eAAI,gBAAA,WAAA,QAAJ;QAHA;;SAEG,GACH,KAAA;YACC,OAAO,CAAA,GAAA,yCAAA,EAAe;QACvB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAI,gBAAA,WAAA,eAAJ;QAAA,KAAA;YACC,OAAO,IAAI,CAAC;QACb;Q,Y;Q,c;IAAC;IACD,OAAA,eAAI,gBAAA,WAAA,gBAAJ;QAAA,KAAA;YACC,OAAO,IAAI,CAAC;QACb;Q,Y;Q,c;IAAC;IAoBD,gBAAA,UAAA,YAAA,SAAU,YAAY;QACrB,CAAA,GAAA,iCAAA,EAAO,IAAI,oBAAoB;QAE/B,IAAI,CAAC,gBAAgB;QACrB,OAAA,UAAM,KAAI,KAAA,IAAA,EAAC,UAAU,eAAe,8BAA8B;IACnE;IAEA;;KAEG,GACH,gBAAA,UAAA,gBAAA,SAAc,OAAsB;QACnC,IAAM,OAAO,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AAA;QACC,IAAI,CAAC,WAAW;QAChB,IAAI,CAAC,SAAS,EAAE;IACjB;IAEQ,cAAA,UAAA,aAAR;QACC,IAAI,IAAI,CAAC,SAAS,GAAG;QACrB,IAAI,IAAI,CAAC,YAAY;QAErB,IAAI,CAAC,cAAc;QAEnB,IAAI,CAAC,WAAW,kBAAkB,IAAI,CAAC,MAAM;IAC9C;IACD,OAAA;AAAA,EA5DmC,CAAA,GAAA,sCAAA;;;A,I,kC,a,U,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,O,U,e,K,G,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,I,O,M,c,M,M,M,I,U,yB,O,K;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,iC,a,U,Y,S,C;I,I,I,O,W,c,O,U,I,K,C,C,E,E,I;I,I,G,O,E,K;I,I,K,O,E,W,U,O;Q,M;Y,I,K,K,E,Q,I,K;Y,O;gB,O,K,C,C,I;gB,M,C;Y;Q;I;I,M,I,U,I,4B;A;AD0BnC;;;CAGG,GACH,IAAA,4CAAA,WAAA,GAAA,SAAA,MAAA;IACS,gCAAA,gBAAA;IAuDR,SAAA,eAAY,MAAc,EAAE,QAAc,EAAE,OAAY;QAAxD,IAAA,QACC,OAAA,KAAA,IAAA,EAAM,QAAQ,UAAU,YAAQ,IAAA;QApCjC,MAAA,YAAmC,KAAK;QACxC,MAAA,QAA+B,KAAK;QAM5B,MAAA,UAAiB,EAAE;QAC3B;;SAEG,GACK,MAAA,cAAc;QACd,MAAA,aAAa;QACb,MAAA,eAMJ,CAAA;QAGI,MAAA,iBAAiB,IAAI,CAAA,GAAA,uCAAA;QAgB5B,MAAK,eACJ,MAAK,QAAQ,gBACb,eAAe,YAAY,CAAA,GAAA,yCAAA,EAAK;QAEjC,MAAK,QAAQ,MAAK,QAAQ,SAAS,MAAK;QACxC,MAAK,gBAAgB,MAAK,QAAQ,iBAAiB,CAAA,GAAA,wCAAA,EAAkB;QACrE,MAAK,WAAW,CAAC,CAAC,MAAK,QAAQ;QAE/B,MAAK,eAAe,GAAG,QAAQ,SAAC,EAAe;YAC9C,MAAK,cAAc;QACpB;QAEA,MAAK,e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A,EAAkB;gBACtB,IAAI,CAAC,YAAY,gBAAgB,QAAQ;gBACzC;YACD;gBACC,CAAA,GAAA,iCAAA,EAAO,KACN,8BACA,QAAQ,MACR,cACA,IAAI,CAAC;gBAEN;QACD;IACF;IAhWwB,eAAA,YAAY;IACZ,eAAA,sBAAsB;IAgW/C,OAAA;AAAC,EApWQ,CAAA,GAAA,wCAAA;;;;;;;;;;A,I,kC,a,U,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,oC,a,U,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,K,C,I,G,E,C,E,I,C,I,C,C,G,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;AE7BT,IAAA,4CAAA,WAAA,GAAA;IACC,SAAA,IAA6B,QAAsB;QAAtB,IAAA,CAAA,WAAA;IAAyB;IAE9C,IAAA,UAAA,gBAAR,SAAsB,MAAc;QACnC,IAAM,WAAW,IAAI,CAAC,SAAS,SAAS,UAAU;QAC5C,IAAA,KAA4B,IAAI,CAAC,UAA/B,OAAI,GAAA,MAAE,OAAI,GAAA,MAAE,OAAI,GAAA,MAAE,MAAG,GAAA;QAC7B,IAAM,MAAM,IAAI,IAAI,GAAA,OAAG,UAAQ,OAAA,OAAM,MAAI,KAAA,OAAI,MAAI,OAAG,MAAI,OAAG,KAAG,KAAA,OAAI;QAClE,mCAAmC;QACnC,IAAI,aAAa,IAAI,MAAM,GAAA,OAAG,KAAK,OAAK,OAAG,KAAK;QAChD,IAAI,aAAa,IAAI,WAAW,CAAA,GAAA,iCAAA;QAChC,OAAO,MAAM,IAAI,MAAM;YACtB,gBAAgB,IAAI,CAAC,SAAS;QAC9B;IACF;IAEA,oEAAA,GACM,IAAA,UAAA,aAAN;QAAoB,OAAA,gCAAA,IAAA,EAAA,KAAA,GAAA,SAAA;Y,I,U,S;Y,O,kC,I,E,S,E;gB,O,G;oB,K;wB,G,K,K;4B;4B;;4B;yB;wBAED,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,cAAc;yBAAK;oB,K;wBAAzC,WAAW,GAAA;wBAEjB,IAAI,SAAS,WAAW,KACvB,MAAM,IAAI,MAAM,iBAAA,OAAiB,SAAS;wBAG3C,OAAA;4BAAA,EAAA,QAAA;4BAAO,SAAS;yBAAM;oB,K;wB,U,G;wBAEtB,CAAA,GAAA,iCAAA,EAAO,MAAM,uBAAuB;wBAEhC,YAAY;wBAEhB,IACC,IAAI,CAAC,SAAS,SAAS,OACvB,IAAI,CAAC,SAAS,SAAS,CAAA,GAAA,yCAAA,EAAK,YAE5B,YACC;wBAKF,MAAM,IAAI,MAAM,yCAAyC;oB,K;wB,O;4B,E,Q;yB;gB;Y;Q;IAE1D;IAED,gBAAA,GACM,IAAA,UAAA,eAAN;QAAsB,OAAA,gCAAA,IAAA,EAAA,KAAA,GAAA,SAAA;Y,I,U,c;Y,O,kC,I,E,S,E;gB,O,G;oB,K;wB,G,K,K;4B;4B;;4B;yB;wBAEH,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,cAAc;yBAAQ;oB,K;wBAA5C,WAAW,GAAA;wBAEjB,IAAI,SAAS,WAAW,KAAK;4BAC5B,IAAI,SAAS,WAAW,KAAK;gCACxB,eAAe;gCAEnB,IAAI,IAAI,CAAC,SAAS,SAAS,CAAA,GAAA,yCAAA,EAAK,YAC/B,eACC;qCAGD,eACC;gCAIF,MAAM,IAAI,MACT,iEACC;4BAEF;4BAED,MAAM,IAAI,MAAM,iBAAA,OAAiB,SAAS;wBAC1C;wBAED,OAAA;4BAAA,EAAA,QAAA;4BAAO,SAAS;yBAAM;oB,K;wB,U,G;wBAEtB,CAAA,GAAA,iCAAA,EAAO,MAAM,+BAA+B;wBAE5C,MAAM,IAAI,MAAM,8CAA8C;oB,K;wB,O;4B,E,Q;yB;gB;Y;Q;IAE/D;IACF,OAAA;AAAA;;;A,I,kC,a,U,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,O,U,e,K,G,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,I,O,M,c,M,M,M,I,U,yB,O,K;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,iC,a,U,Y;I,iC,O,U,S,C;Q,I,I,G,I,G,I,U,Q,I,G,I;Y,I,S,C,E;Y,I,I,K,E,I,O,U,e,K,G,I,C,C,E,G,C,C,E;Q;Q,O;I;I,O,+B,M,I,E;A;A,I,iC,a,U,Y,S,C;I,I,I,O,W,c,O,U,I,K,C,C,E,E,I;I,I,G,O,E,K;I,I,K,O,E,W,U,O;Q,M;Y,I,K,K,E,Q,I,K;Y,O;gB,O,K,C,C,I;gB,M,C;Y;Q;I;I,M,I,U,I,4B;A;A,I,+B,a,U,U,S,C,E,C;I,I,I,O,W,c,C,C,O,S;I,I,C,G,O;I,I,I,E,K,I,G,K,E,E;I,I;Q,M,A,C,M,K,K,M,C,K,C,A,C,I,E,M,E,K,G,K,E;I,E,O,O;Q,I;Y,O;Q;I,S;Q,I;Y,I,K,C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","sources":["lib/exports.ts","lib/util.ts","lib/supports.ts","lib/peer.ts","node_modules/eventemitter3/index.js","lib/logger.ts","lib/socket.ts","lib/enums.ts","package.json","lib/mediaconnection.ts","lib/negotiator.ts","lib/baseconnection.ts","lib/dataconnection.ts","lib/encodingQueue.ts","lib/api.ts"],"sourcesContent":["export { util, type Util } from \"./util\";\nimport { Peer } from \"./peer\";\nexport type { PeerEvents, PeerError, PeerOptions } from \"./peer\";\n\nexport type {\n\tPeerJSOption,\n\tPeerConnectOption,\n\tAnswerOption,\n\tCallOption,\n} from \"./optionInterfaces\";\nexport type { UtilSupportsObj } from \"./util\";\nexport type { BaseConnection, BaseConnectionEvents } from \"./baseconnection\";\nexport type { DataConnection, DataConnectionEvents } from \"./dataconnection\";\nexport type { MediaConnection, MediaConnectionEvents } from \"./mediaconnection\";\nexport type { LogLevel } from \"./logger\";\nexport type {\n\tConnectionType,\n\tPeerErrorType,\n\tSerializationType,\n\tSocketEventType,\n\tServerMessageType,\n} from \"./enums\";\n\nexport { Peer };\nexport default Peer;\n","import * as BinaryPack from \"peerjs-js-binarypack\";\nimport { Supports } from \"./supports\";\n\nexport interface UtilSupportsObj {\n\t/**\n\t * The current browser.\n\t * This property can be useful in determining whether two peers can connect.\n\t *\n\t * ```ts\n\t * if (util.browser === 'firefox') {\n\t *  // OK to peer with Firefox peers.\n\t * }\n\t * ```\n\t *\n\t * `util.browser` can currently have the values\n\t * `'firefox', 'chrome', 'safari', 'edge', 'Not a supported browser.', 'Not a browser.' (unknown WebRTC-compatible agent).\n\t */\n\tbrowser: boolean;\n\twebRTC: boolean;\n\t/**\n\t * True if the current browser supports media streams and PeerConnection.\n\t */\n\taudioVideo: boolean;\n\t/**\n\t * True if the current browser supports DataChannel and PeerConnection.\n\t */\n\tdata: boolean;\n\tbinaryBlob: boolean;\n\t/**\n\t * True if the current browser supports reliable DataChannels.\n\t */\n\treliable: boolean;\n}\n\nconst DEFAULT_CONFIG = {\n\ticeServers: [\n\t\t{ urls: \"stun:stun.l.google.com:19302\" },\n\t\t{\n\t\t\turls: [\n\t\t\t\t\"turn:eu-0.turn.peerjs.com:3478\",\n\t\t\t\t\"turn:us-0.turn.peerjs.com:3478\",\n\t\t\t],\n\t\t\tusername: \"peerjs\",\n\t\t\tcredential: \"peerjsp\",\n\t\t},\n\t],\n\tsdpSemantics: \"unified-plan\",\n};\n\nexport class Util {\n\tnoop(): void {}\n\n\treadonly CLOUD_HOST = \"0.peerjs.com\";\n\treadonly CLOUD_PORT = 443;\n\n\t// Browsers that need chunking:\n\treadonly chunkedBrowsers = { Chrome: 1, chrome: 1 };\n\treadonly chunkedMTU = 16300; // The original 60000 bytes setting does not work when sending data from Firefox to Chrome, which is \"cut off\" after 16384 bytes and delivered individually.\n\n\t// Returns browser-agnostic default config\n\treadonly defaultConfig = DEFAULT_CONFIG;\n\n\treadonly browser = Supports.getBrowser();\n\treadonly browserVersion = Supports.getVersion();\n\n\t/**\n\t * A hash of WebRTC features mapped to booleans that correspond to whether the feature is supported by the current browser.\n\t *\n\t * :::caution\n\t * Only the properties documented here are guaranteed to be present on `util.supports`\n\t * :::\n\t */\n\treadonly supports = (function () {\n\t\tconst supported: UtilSupportsObj = {\n\t\t\tbrowser: Supports.isBrowserSupported(),\n\t\t\twebRTC: Supports.isWebRTCSupported(),\n\t\t\taudioVideo: false,\n\t\t\tdata: false,\n\t\t\tbinaryBlob: false,\n\t\t\treliable: false,\n\t\t};\n\n\t\tif (!supported.webRTC) return supported;\n\n\t\tlet pc: RTCPeerConnection;\n\n\t\ttry {\n\t\t\tpc = new RTCPeerConnection(DEFAULT_CONFIG);\n\n\t\t\tsupported.audioVideo = true;\n\n\t\t\tlet dc: RTCDataChannel;\n\n\t\t\ttry {\n\t\t\t\tdc = pc.createDataChannel(\"_PEERJSTEST\", { ordered: true });\n\t\t\t\tsupported.data = true;\n\t\t\t\tsupported.reliable = !!dc.ordered;\n\n\t\t\t\t// Binary test\n\t\t\t\ttry {\n\t\t\t\t\tdc.binaryType = \"blob\";\n\t\t\t\t\tsupported.binaryBlob = !Supports.isIOS;\n\t\t\t\t} catch (e) {}\n\t\t\t} catch (e) {\n\t\t\t} finally {\n\t\t\t\tif (dc) {\n\t\t\t\t\tdc.close();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t} finally {\n\t\t\tif (pc) {\n\t\t\t\tpc.close();\n\t\t\t}\n\t\t}\n\n\t\treturn supported;\n\t})();\n\n\t// Ensure alphanumeric ids\n\tvalidateId(id: string): boolean {\n\t\t// Allow empty ids\n\t\treturn !id || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.test(id);\n\t}\n\n\tpack = BinaryPack.pack;\n\tunpack = BinaryPack.unpack;\n\n\t// Binary stuff\n\n\tprivate _dataCount: number = 1;\n\n\tchunk(\n\t\tblob: Blob,\n\t): { __peerData: number; n: number; total: number; data: Blob }[] {\n\t\tconst chunks = [];\n\t\tconst size = blob.size;\n\t\tconst total = Math.ceil(size / util.chunkedMTU);\n\n\t\tlet index = 0;\n\t\tlet start = 0;\n\n\t\twhile (start < size) {\n\t\t\tconst end = Math.min(size, start + util.chunkedMTU);\n\t\t\tconst b = blob.slice(start, end);\n\n\t\t\tconst chunk = {\n\t\t\t\t__peerData: this._dataCount,\n\t\t\t\tn: index,\n\t\t\t\tdata: b,\n\t\t\t\ttotal,\n\t\t\t};\n\n\t\t\tchunks.push(chunk);\n\n\t\t\tstart = end;\n\t\t\tindex++;\n\t\t}\n\n\t\tthis._dataCount++;\n\n\t\treturn chunks;\n\t}\n\n\tblobToArrayBuffer(\n\t\tblob: Blob,\n\t\tcb: (arg: ArrayBuffer | null) => void,\n\t): FileReader {\n\t\tconst fr = new FileReader();\n\n\t\tfr.onload = function (evt) {\n\t\t\tif (evt.target) {\n\t\t\t\tcb(evt.target.result as ArrayBuffer);\n\t\t\t}\n\t\t};\n\n\t\tfr.readAsArrayBuffer(blob);\n\n\t\treturn fr;\n\t}\n\n\tbinaryStringToArrayBuffer(binary: string): ArrayBuffer | SharedArrayBuffer {\n\t\tconst byteArray = new Uint8Array(binary.length);\n\n\t\tfor (let i = 0; i < binary.length; i++) {\n\t\t\tbyteArray[i] = binary.charCodeAt(i) & 0xff;\n\t\t}\n\n\t\treturn byteArray.buffer;\n\t}\n\n\trandomToken(): string {\n\t\treturn Math.random().toString(36).slice(2);\n\t}\n\n\tisSecure(): boolean {\n\t\treturn location.protocol === \"https:\";\n\t}\n}\n\n/**\n * Provides a variety of helpful utilities.\n *\n * :::caution\n * Only the utilities documented here are guaranteed to be present on `util`.\n * Undocumented utilities can be removed without warning.\n * We don't consider these to be breaking changes.\n * :::\n */\nexport const util = new Util();\n","import webRTCAdapter_import from \"webrtc-adapter\";\n\nconst webRTCAdapter: typeof webRTCAdapter_import =\n\t//@ts-ignore\n\twebRTCAdapter_import.default || webRTCAdapter_import;\n\nexport const Supports = new (class {\n\treadonly isIOS = [\"iPad\", \"iPhone\", \"iPod\"].includes(navigator.platform);\n\treadonly supportedBrowsers = [\"firefox\", \"chrome\", \"safari\"];\n\n\treadonly minFirefoxVersion = 59;\n\treadonly minChromeVersion = 72;\n\treadonly minSafariVersion = 605;\n\n\tisWebRTCSupported(): boolean {\n\t\treturn typeof RTCPeerConnection !== \"undefined\";\n\t}\n\n\tisBrowserSupported(): boolean {\n\t\tconst browser = this.getBrowser();\n\t\tconst version = this.getVersion();\n\n\t\tconst validBrowser = this.supportedBrowsers.includes(browser);\n\n\t\tif (!validBrowser) return false;\n\n\t\tif (browser === \"chrome\") return version >= this.minChromeVersion;\n\t\tif (browser === \"firefox\") return version >= this.minFirefoxVersion;\n\t\tif (browser === \"safari\")\n\t\t\treturn !this.isIOS && version >= this.minSafariVersion;\n\n\t\treturn false;\n\t}\n\n\tgetBrowser(): string {\n\t\treturn webRTCAdapter.browserDetails.browser;\n\t}\n\n\tgetVersion(): number {\n\t\treturn webRTCAdapter.browserDetails.version || 0;\n\t}\n\n\tisUnifiedPlanSupported(): boolean {\n\t\tconst browser = this.getBrowser();\n\t\tconst version = webRTCAdapter.browserDetails.version || 0;\n\n\t\tif (browser === \"chrome\" && version < this.minChromeVersion) return false;\n\t\tif (browser === \"firefox\" && version >= this.minFirefoxVersion) return true;\n\t\tif (\n\t\t\t!window.RTCRtpTransceiver ||\n\t\t\t!(\"currentDirection\" in RTCRtpTransceiver.prototype)\n\t\t)\n\t\t\treturn false;\n\n\t\tlet tempPc: RTCPeerConnection;\n\t\tlet supported = false;\n\n\t\ttry {\n\t\t\ttempPc = new RTCPeerConnection();\n\t\t\ttempPc.addTransceiver(\"audio\");\n\t\t\tsupported = true;\n\t\t} catch (e) {\n\t\t} finally {\n\t\t\tif (tempPc) {\n\t\t\t\ttempPc.close();\n\t\t\t}\n\t\t}\n\n\t\treturn supported;\n\t}\n\n\ttoString(): string {\n\t\treturn `Supports:\n    browser:${this.getBrowser()}\n    version:${this.getVersion()}\n    isIOS:${this.isIOS}\n    isWebRTCSupported:${this.isWebRTCSupported()}\n    isBrowserSupported:${this.isBrowserSupported()}\n    isUnifiedPlanSupported:${this.isUnifiedPlanSupported()}`;\n\t}\n})();\n","import { EventEmitter } from \"eventemitter3\";\nimport { util } from \"./util\";\nimport logger, { LogLevel } from \"./logger\";\nimport { Socket } from \"./socket\";\nimport { MediaConnection } from \"./mediaconnection\";\nimport { DataConnection } from \"./dataconnection\";\nimport {\n\tConnectionType,\n\tPeerErrorType,\n\tSocketEventType,\n\tServerMessageType,\n} from \"./enums\";\nimport { ServerMessage } from \"./servermessage\";\nimport { API } from \"./api\";\nimport type {\n\tPeerConnectOption,\n\tPeerJSOption,\n\tCallOption,\n} from \"./optionInterfaces\";\nimport { BaseConnection } from './baseconnection';\n\nclass PeerOptions implements PeerJSOption {\n\t/**\n\t * Prints log messages depending on the debug level passed in.\n\t */\n\tdebug?: LogLevel;\n\t/**\n\t * Server host. Defaults to `0.peerjs.com`.\n\t * Also accepts `'/'` to signify relative hostname.\n\t */\n\thost?: string;\n\t/**\n\t * Server port. Defaults to `443`.\n\t */\n\tport?: number;\n\t/**\n\t * The path where your self-hosted PeerServer is running. Defaults to `'/'`\n\t */\n\tpath?: string;\n\t/**\n\t * API key for the PeerServer.\n\t * This is not used anymore.\n\t * @deprecated\n\t */\n\tkey?: string;\n\ttoken?: string;\n\t/**\n\t * Configuration hash passed to RTCPeerConnection.\n\t * This hash contains any custom ICE/TURN server configuration.\n\t *\n\t * Defaults to {@apilink util.defaultConfig}\n\t */\n\tconfig?: any;\n\t/**\n\t * Set to true `true` if you're using TLS.\n\t * :::danger\n\t * If possible *always use TLS*\n\t * :::\n\t */\n\tsecure?: boolean;\n\tpingInterval?: number;\n\treferrerPolicy?: ReferrerPolicy;\n\tlogFunction?: (logLevel: LogLevel, ...rest: any[]) => void;\n}\n\nclass PeerError extends Error {\n\tconstructor(type: PeerErrorType, err: Error | string) {\n\t\tif (typeof err === \"string\") {\n\t\t\tsuper(err);\n\t\t} else {\n\t\t\tsuper();\n\t\t\tObject.assign(this, err);\n\t\t}\n\n\t\tthis.type = type;\n\t}\n\n\ttype: PeerErrorType;\n}\nexport type { PeerError, PeerOptions };\n\nexport type PeerEvents = {\n\t/**\n\t * Emitted when a connection to the PeerServer is established.\n\t *\n\t * You may use the peer before this is emitted, but messages to the server will be queued. <code>id</code> is the brokering ID of the peer (which was either provided in the constructor or assigned by the server).<span class='tip'>You should not wait for this event before connecting to other peers if connection speed is important.</span>\n\t */\n\topen: (id: string) => void;\n\t/**\n\t * Emitted when a new data connection is established from a remote peer.\n\t */\n\tconnection: (dataConnection: DataConnection) => void;\n\t/**\n\t * Emitted when a remote peer attempts to call you.\n\t */\n\tcall: (mediaConnection: MediaConnection) => void;\n\t/**\n\t * Emitted when the peer is destroyed and can no longer accept or create any new connections.\n\t */\n\tclose: () => void;\n\t/**\n\t * Emitted when the peer is disconnected from the signalling server\n\t */\n\tdisconnected: (currentId: string) => void;\n\t/**\n\t * Errors on the peer are almost always fatal and will destroy the peer.\n\t *\n\t * Errors from the underlying socket and PeerConnections are forwarded here.\n\t */\n\terror: (error: PeerError) => void;\n};\n/**\n * A peer who can initiate connections with other peers.\n */\nexport class Peer extends EventEmitter<PeerEvents> {\n\tprivate static readonly DEFAULT_KEY = \"peerjs\";\n\n\tprivate readonly _options: PeerOptions;\n\tprivate readonly _api: API;\n\tprivate readonly _socket: Socket;\n\n\tprivate _id: string | null = null;\n\tprivate _lastServerId: string | null = null;\n\n\t// States.\n\tprivate _destroyed = false; // Connections have been killed\n\tprivate _disconnected = false; // Connection to PeerServer killed but P2P connections still active\n\tprivate _open = false; // Sockets and such are not yet open.\n\tprivate readonly _connections: Map<\n\t\tstring,\n\t\t(DataConnection | MediaConnection)[]\n\t> = new Map(); // All connections for this peer.\n\tprivate readonly _lostMessages: Map<string, ServerMessage[]> = new Map(); // src => [list of messages]\n\t/**\n\t * The brokering ID of this peer\n\t *\n\t * If no ID was specified in {@apilink Peer | the constructor},\n\t * this will be `undefined` until the {@apilink PeerEvents | `open`} event is emitted.\n\t */\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\tget options() {\n\t\treturn this._options;\n\t}\n\n\tget open() {\n\t\treturn this._open;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tget socket() {\n\t\treturn this._socket;\n\t}\n\n\t/**\n\t * A hash of all connections associated with this peer, keyed by the remote peer's ID.\n\t * @deprecated\n\t * Return type will change from Object to Map<string,[]>\n\t */\n\tget connections(): Object {\n\t\tconst plainConnections = Object.create(null);\n\n\t\tfor (const [k, v] of this._connections) {\n\t\t\tplainConnections[k] = v;\n\t\t}\n\n\t\treturn plainConnections;\n\t}\n\n\t/**\n\t * true if this peer and all of its connections can no longer be used.\n\t */\n\tget destroyed() {\n\t\treturn this._destroyed;\n\t}\n\t/**\n\t * false if there is an active connection to the PeerServer.\n\t */\n\tget disconnected() {\n\t\treturn this._disconnected;\n\t}\n\n\t/**\n\t * A peer can connect to other peers and listen for connections.\n\t */\n\tconstructor();\n\n\t/**\n\t * A peer can connect to other peers and listen for connections.\n\t * @param options for specifying details about PeerServer\n\t */\n\tconstructor(options: PeerOptions);\n\n\t/**\n\t * A peer can connect to other peers and listen for connections.\n\t * @param id Other peers can connect to this peer using the provided ID.\n\t *     If no ID is given, one will be generated by the brokering server.\n\t * The ID must start and end with an alphanumeric character (lower or upper case character or a digit). In the middle of the ID spaces, dashes (-) and underscores (_) are allowed. Use {@apilink PeerOptions.metadata } to send identifying information.\n\t * @param options for specifying details about PeerServer\n\t */\n\tconstructor(id: string, options?: PeerOptions);\n\n\tconstructor(id?: string | PeerOptions, options?: PeerOptions) {\n\t\tsuper();\n\n\t\tlet userId: string | undefined;\n\n\t\t// Deal with overloading\n\t\tif (id && id.constructor == Object) {\n\t\t\toptions = id as PeerOptions;\n\t\t} else if (id) {\n\t\t\tuserId = id.toString();\n\t\t}\n\n\t\t// Configurize options\n\t\toptions = {\n\t\t\tdebug: 0, // 1: Errors, 2: Warnings, 3: All logs\n\t\t\thost: util.CLOUD_HOST,\n\t\t\tport: util.CLOUD_PORT,\n\t\t\tpath: \"/\",\n\t\t\tkey: Peer.DEFAULT_KEY,\n\t\t\ttoken: util.randomToken(),\n\t\t\tconfig: util.defaultConfig,\n\t\t\treferrerPolicy: \"strict-origin-when-cross-origin\",\n\t\t\t...options,\n\t\t};\n\t\tthis._options = options;\n\n\t\t// Detect relative URL host.\n\t\tif (this._options.host === \"/\") {\n\t\t\tthis._options.host = window.location.hostname;\n\t\t}\n\n\t\t// Set path correctly.\n\t\tif (this._options.path) {\n\t\t\tif (this._options.path[0] !== \"/\") {\n\t\t\t\tthis._options.path = \"/\" + this._options.path;\n\t\t\t}\n\t\t\tif (this._options.path[this._options.path.length - 1] !== \"/\") {\n\t\t\t\tthis._options.path += \"/\";\n\t\t\t}\n\t\t}\n\n\t\t// Set whether we use SSL to same as current host\n\t\tif (\n\t\t\tthis._options.secure === undefined &&\n\t\t\tthis._options.host !== util.CLOUD_HOST\n\t\t) {\n\t\t\tthis._options.secure = util.isSecure();\n\t\t} else if (this._options.host == util.CLOUD_HOST) {\n\t\t\tthis._options.secure = true;\n\t\t}\n\t\t// Set a custom log function if present\n\t\tif (this._options.logFunction) {\n\t\t\tlogger.setLogFunction(this._options.logFunction);\n\t\t}\n\n\t\tlogger.logLevel = this._options.debug || 0;\n\n\t\tthis._api = new API(options);\n\t\tthis._socket = this._createServerConnection();\n\n\t\t// Sanity checks\n\t\t// Ensure WebRTC supported\n\t\tif (!util.supports.audioVideo && !util.supports.data) {\n\t\t\tthis._delayedAbort(\n\t\t\t\tPeerErrorType.BrowserIncompatible,\n\t\t\t\t\"The current browser does not support WebRTC\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure alphanumeric id\n\t\tif (!!userId && !util.validateId(userId)) {\n\t\t\tthis._delayedAbort(PeerErrorType.InvalidID, `ID \"${userId}\" is invalid`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (userId) {\n\t\t\tthis._initialize(userId);\n\t\t} else {\n\t\t\tthis._api\n\t\t\t\t.retrieveId()\n\t\t\t\t.then((id) => this._initialize(id))\n\t\t\t\t.catch((error) => this._abort(PeerErrorType.ServerError, error));\n\t\t}\n\t}\n\n\tprivate _createServerConnection(): Socket {\n\t\tconst socket = new Socket(\n\t\t\tthis._options.secure,\n\t\t\tthis._options.host!,\n\t\t\tthis._options.port!,\n\t\t\tthis._options.path!,\n\t\t\tthis._options.key!,\n\t\t\tthis._options.pingInterval,\n\t\t);\n\n\t\tsocket.on(SocketEventType.Message, (data: ServerMessage) => {\n\t\t\tthis._handleMessage(data);\n\t\t});\n\n\t\tsocket.on(SocketEventType.Error, (error: string) => {\n\t\t\tthis._abort(PeerErrorType.SocketError, error);\n\t\t});\n\n\t\tsocket.on(SocketEventType.Disconnected, () => {\n\t\t\tif (this.disconnected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.emitError(PeerErrorType.Network, \"Lost connection to server.\");\n\t\t\tthis.disconnect();\n\t\t});\n\n\t\tsocket.on(SocketEventType.Close, () => {\n\t\t\tif (this.disconnected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._abort(\n\t\t\t\tPeerErrorType.SocketClosed,\n\t\t\t\t\"Underlying socket is already closed.\",\n\t\t\t);\n\t\t});\n\n\t\treturn socket;\n\t}\n\n\t/** Initialize a connection with the server. */\n\tprivate _initialize(id: string): void {\n\t\tthis._id = id;\n\t\tthis.socket.start(id, this._options.token!);\n\t}\n\n\t/** Handles messages from the server. */\n\tprivate _handleMessage(message: ServerMessage): void {\n\t\tconst type = message.type;\n\t\tconst payload = message.payload;\n\t\tconst peerId = message.src;\n\n\t\tswitch (type) {\n\t\t\tcase ServerMessageType.Open: // The connection to the server is open.\n\t\t\t\tthis._lastServerId = this.id;\n\t\t\t\tthis._open = true;\n\t\t\t\tthis.emit(\"open\", this.id);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Error: // Server error.\n\t\t\t\tthis._abort(PeerErrorType.ServerError, payload.msg);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.IdTaken: // The selected ID is taken.\n\t\t\t\tthis._abort(PeerErrorType.UnavailableID, `ID \"${this.id}\" is taken`);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.InvalidKey: // The given API key cannot be found.\n\t\t\t\tthis._abort(\n\t\t\t\t\tPeerErrorType.InvalidKey,\n\t\t\t\t\t`API KEY \"${this._options.key}\" is invalid`,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Leave: // Another peer has closed its connection to this peer.\n\t\t\t\tlogger.log(`Received leave message from ${peerId}`);\n\t\t\t\tthis._cleanupPeer(peerId);\n\t\t\t\tthis._connections.delete(peerId);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Expire: // The offer sent to a peer has expired without response.\n\t\t\t\tthis.emitError(\n\t\t\t\t\tPeerErrorType.PeerUnavailable,\n\t\t\t\t\t`Could not connect to peer ${peerId}`,\n\t\t\t\t);\n                const peerConnections = this._connections.get(peerId);\n                if (peerConnections) {\n                    peerConnections.forEach(conn => {\n                        (conn as BaseConnection<any>).emit('error', new PeerError(\n                            PeerErrorType.PeerUnavailable,\n                            `Could not connect to peer ${peerId}`));\n                    });\n                }\n                this._cleanupPeer(peerId);\n                this._connections.delete(peerId);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Offer: {\n\t\t\t\t// we should consider switching this to CALL/CONNECT, but this is the least breaking option.\n\t\t\t\tconst connectionId = payload.connectionId;\n\t\t\t\tlet connection = this.getConnection(peerId, connectionId);\n\n\t\t\t\tif (connection) {\n\t\t\t\t\tconnection.close();\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`Offer received for existing Connection ID:${connectionId}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Create a new connection.\n\t\t\t\tif (payload.type === ConnectionType.Media) {\n\t\t\t\t\tconst mediaConnection = new MediaConnection(peerId, this, {\n\t\t\t\t\t\tconnectionId: connectionId,\n\t\t\t\t\t\t_payload: payload,\n\t\t\t\t\t\tmetadata: payload.metadata,\n\t\t\t\t\t});\n\t\t\t\t\tconnection = mediaConnection;\n\t\t\t\t\tthis._addConnection(peerId, connection);\n\t\t\t\t\tthis.emit(\"call\", mediaConnection);\n\t\t\t\t} else if (payload.type === ConnectionType.Data) {\n\t\t\t\t\tconst dataConnection = new DataConnection(peerId, this, {\n\t\t\t\t\t\tconnectionId: connectionId,\n\t\t\t\t\t\t_payload: payload,\n\t\t\t\t\t\tmetadata: payload.metadata,\n\t\t\t\t\t\tlabel: payload.label,\n\t\t\t\t\t\tserialization: payload.serialization,\n\t\t\t\t\t\treliable: payload.reliable,\n\t\t\t\t\t});\n\t\t\t\t\tconnection = dataConnection;\n\t\t\t\t\tthis._addConnection(peerId, connection);\n\t\t\t\t\tthis.emit(\"connection\", dataConnection);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(`Received malformed connection type:${payload.type}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Find messages.\n\t\t\t\tconst messages = this._getMessages(connectionId);\n\t\t\t\tfor (const message of messages) {\n\t\t\t\t\tconnection.handleMessage(message);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tif (!payload) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`You received a malformed message from ${peerId} of type ${type}`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst connectionId = payload.connectionId;\n\t\t\t\tconst connection = this.getConnection(peerId, connectionId);\n\n\t\t\t\tif (connection && connection.peerConnection) {\n\t\t\t\t\t// Pass it on.\n\t\t\t\t\tconnection.handleMessage(message);\n\t\t\t\t} else if (connectionId) {\n\t\t\t\t\t// Store for possible later use\n\t\t\t\t\tthis._storeMessage(connectionId, message);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\"You received an unrecognized message:\", message);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Stores messages without a set up connection, to be claimed later. */\n\tprivate _storeMessage(connectionId: string, message: ServerMessage): void {\n\t\tif (!this._lostMessages.has(connectionId)) {\n\t\t\tthis._lostMessages.set(connectionId, []);\n\t\t}\n\n\t\tthis._lostMessages.get(connectionId).push(message);\n\t}\n\n\t/**\n\t * Retrieve messages from lost message store\n\t * @internal\n\t */\n\t//TODO Change it to private\n\tpublic _getMessages(connectionId: string): ServerMessage[] {\n\t\tconst messages = this._lostMessages.get(connectionId);\n\n\t\tif (messages) {\n\t\t\tthis._lostMessages.delete(connectionId);\n\t\t\treturn messages;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * Connects to the remote peer specified by id and returns a data connection.\n\t * @param peer The brokering ID of the remote peer (their {@apilink Peer.id}).\n\t * @param options for specifying details about Peer Connection\n\t */\n\tconnect(peer: string, options: PeerConnectOption = {}): DataConnection {\n\t\tif (this.disconnected) {\n\t\t\tlogger.warn(\n\t\t\t\t\"You cannot connect to a new Peer because you called \" +\n\t\t\t\t\t\".disconnect() on this Peer and ended your connection with the \" +\n\t\t\t\t\t\"server. You can create a new Peer to reconnect, or call reconnect \" +\n\t\t\t\t\t\"on this peer if you believe its ID to still be available.\",\n\t\t\t);\n\t\t\tthis.emitError(\n\t\t\t\tPeerErrorType.Disconnected,\n\t\t\t\t\"Cannot connect to new Peer after disconnecting from server.\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst dataConnection = new DataConnection(peer, this, options);\n\t\tthis._addConnection(peer, dataConnection);\n\t\treturn dataConnection;\n\t}\n\n\t/**\n\t * Calls the remote peer specified by id and returns a media connection.\n\t * @param peer The brokering ID of the remote peer (their peer.id).\n\t * @param stream The caller's media stream\n\t * @param options Metadata associated with the connection, passed in by whoever initiated the connection.\n\t */\n\tcall(\n\t\tpeer: string,\n\t\tstream: MediaStream,\n\t\toptions: CallOption = {},\n\t): MediaConnection {\n\t\tif (this.disconnected) {\n\t\t\tlogger.warn(\n\t\t\t\t\"You cannot connect to a new Peer because you called \" +\n\t\t\t\t\t\".disconnect() on this Peer and ended your connection with the \" +\n\t\t\t\t\t\"server. You can create a new Peer to reconnect.\",\n\t\t\t);\n\t\t\tthis.emitError(\n\t\t\t\tPeerErrorType.Disconnected,\n\t\t\t\t\"Cannot connect to new Peer after disconnecting from server.\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!stream) {\n\t\t\tlogger.error(\n\t\t\t\t\"To call a peer, you must provide a stream from your browser's `getUserMedia`.\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst mediaConnection = new MediaConnection(peer, this, {\n\t\t\t...options,\n\t\t\t_stream: stream,\n\t\t});\n\t\tthis._addConnection(peer, mediaConnection);\n\t\treturn mediaConnection;\n\t}\n\n\t/** Add a data/media connection to this peer. */\n\tprivate _addConnection(\n\t\tpeerId: string,\n\t\tconnection: MediaConnection | DataConnection,\n\t): void {\n\t\tlogger.log(\n\t\t\t`add connection ${connection.type}:${connection.connectionId} to peerId:${peerId}`,\n\t\t);\n\n\t\tif (!this._connections.has(peerId)) {\n\t\t\tthis._connections.set(peerId, []);\n\t\t}\n\t\tthis._connections.get(peerId).push(connection);\n\t}\n\n\t//TODO should be private\n\t_removeConnection(connection: DataConnection | MediaConnection): void {\n\t\tconst connections = this._connections.get(connection.peer);\n\n\t\tif (connections) {\n\t\t\tconst index = connections.indexOf(connection);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tconnections.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\t//remove from lost messages\n\t\tthis._lostMessages.delete(connection.connectionId);\n\t}\n\n\t/** Retrieve a data/media connection for this peer. */\n\tgetConnection(\n\t\tpeerId: string,\n\t\tconnectionId: string,\n\t): null | DataConnection | MediaConnection {\n\t\tconst connections = this._connections.get(peerId);\n\t\tif (!connections) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (const connection of connections) {\n\t\t\tif (connection.connectionId === connectionId) {\n\t\t\t\treturn connection;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _delayedAbort(type: PeerErrorType, message: string | Error): void {\n\t\tsetTimeout(() => {\n\t\t\tthis._abort(type, message);\n\t\t}, 0);\n\t}\n\n\t/**\n\t * Emits an error message and destroys the Peer.\n\t * The Peer is not destroyed if it's in a disconnected state, in which case\n\t * it retains its disconnected state and its existing connections.\n\t */\n\tprivate _abort(type: PeerErrorType, message: string | Error): void {\n\t\tlogger.error(\"Aborting!\");\n\n\t\tthis.emitError(type, message);\n\n\t\tif (!this._lastServerId) {\n\t\t\tthis.destroy();\n\t\t} else {\n\t\t\tthis.disconnect();\n\t\t}\n\t}\n\n\t/** Emits a typed error message. */\n\temitError(type: PeerErrorType, err: string | Error): void {\n\t\tlogger.error(\"Error:\", err);\n\n\t\tthis.emit(\"error\", new PeerError(type, err));\n\t}\n\n\t/**\n\t * Destroys the Peer: closes all active connections as well as the connection\n\t * to the server.\n\t *\n\t * :::caution\n\t * This cannot be undone; the respective peer object will no longer be able\n\t * to create or receive any connections, its ID will be forfeited on the server,\n\t * and all of its data and media connections will be closed.\n\t * :::\n\t */\n\tdestroy(): void {\n\t\tif (this.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.log(`Destroy peer with ID:${this.id}`);\n\n\t\tthis.disconnect();\n\t\tthis._cleanup();\n\n\t\tthis._destroyed = true;\n\n\t\tthis.emit(\"close\");\n\t}\n\n\t/** Disconnects every connection on this peer. */\n\tprivate _cleanup(): void {\n\t\tfor (const peerId of this._connections.keys()) {\n\t\t\tthis._cleanupPeer(peerId);\n\t\t\tthis._connections.delete(peerId);\n\t\t}\n\n\t\tthis.socket.removeAllListeners();\n\t}\n\n\t/** Closes all connections to this peer. */\n\tprivate _cleanupPeer(peerId: string): void {\n\t\tconst connections = this._connections.get(peerId);\n\n\t\tif (!connections) return;\n\n\t\tfor (const connection of connections) {\n\t\t\tconnection.close();\n\t\t}\n\t}\n\n\t/**\n\t * Disconnects the Peer's connection to the PeerServer. Does not close any\n\t *  active connections.\n\t * Warning: The peer can no longer create or accept connections after being\n\t *  disconnected. It also cannot reconnect to the server.\n\t */\n\tdisconnect(): void {\n\t\tif (this.disconnected) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentId = this.id;\n\n\t\tlogger.log(`Disconnect peer with ID:${currentId}`);\n\n\t\tthis._disconnected = true;\n\t\tthis._open = false;\n\n\t\tthis.socket.close();\n\n\t\tthis._lastServerId = currentId;\n\t\tthis._id = null;\n\n\t\tthis.emit(\"disconnected\", currentId);\n\t}\n\n\t/** Attempts to reconnect with the same ID.\n\t *\n\t * Only {@apilink Peer.disconnect | disconnected peers} can be reconnected.\n\t * Destroyed peers cannot be reconnected.\n\t * If the connection fails (as an example, if the peer's old ID is now taken),\n\t * the peer's existing connections will not close, but any associated errors events will fire.\n\t */\n\treconnect(): void {\n\t\tif (this.disconnected && !this.destroyed) {\n\t\t\tlogger.log(\n\t\t\t\t`Attempting reconnection to server with ID ${this._lastServerId}`,\n\t\t\t);\n\t\t\tthis._disconnected = false;\n\t\t\tthis._initialize(this._lastServerId!);\n\t\t} else if (this.destroyed) {\n\t\t\tthrow new Error(\n\t\t\t\t\"This peer cannot reconnect to the server. It has already been destroyed.\",\n\t\t\t);\n\t\t} else if (!this.disconnected && !this.open) {\n\t\t\t// Do nothing. We're still connecting the first time.\n\t\t\tlogger.error(\n\t\t\t\t\"In a hurry? We're still trying to make the initial connection!\",\n\t\t\t);\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t`Peer ${this.id} cannot reconnect because it is not disconnected from the server!`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Get a list of available peer IDs. If you're running your own server, you'll\n\t * want to set allow_discovery: true in the PeerServer options. If you're using\n\t * the cloud server, email team@peerjs.com to get the functionality enabled for\n\t * your key.\n\t */\n\tlistAllPeers(cb = (_: any[]) => {}): void {\n\t\tthis._api\n\t\t\t.listAllPeers()\n\t\t\t.then((peers) => cb(peers))\n\t\t\t.catch((error) => this._abort(PeerErrorType.ServerError, error));\n\t}\n}\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","const LOG_PREFIX = \"PeerJS: \";\n\n/*\nPrints log messages depending on the debug level passed in. Defaults to 0.\n0  Prints no logs.\n1  Prints only errors.\n2  Prints errors and warnings.\n3  Prints all logs.\n*/\nexport enum LogLevel {\n\t/**\n\t * Prints no logs.\n\t */\n\tDisabled,\n\t/**\n\t * Prints only errors.\n\t */\n\tErrors,\n\t/**\n\t * Prints errors and warnings.\n\t */\n\tWarnings,\n\t/**\n\t * Prints all logs.\n\t */\n\tAll,\n}\n\nclass Logger {\n\tprivate _logLevel = LogLevel.Disabled;\n\n\tget logLevel(): LogLevel {\n\t\treturn this._logLevel;\n\t}\n\n\tset logLevel(logLevel: LogLevel) {\n\t\tthis._logLevel = logLevel;\n\t}\n\n\tlog(...args: any[]) {\n\t\tif (this._logLevel >= LogLevel.All) {\n\t\t\tthis._print(LogLevel.All, ...args);\n\t\t}\n\t}\n\n\twarn(...args: any[]) {\n\t\tif (this._logLevel >= LogLevel.Warnings) {\n\t\t\tthis._print(LogLevel.Warnings, ...args);\n\t\t}\n\t}\n\n\terror(...args: any[]) {\n\t\tif (this._logLevel >= LogLevel.Errors) {\n\t\t\tthis._print(LogLevel.Errors, ...args);\n\t\t}\n\t}\n\n\tsetLogFunction(fn: (logLevel: LogLevel, ..._: any[]) => void): void {\n\t\tthis._print = fn;\n\t}\n\n\tprivate _print(logLevel: LogLevel, ...rest: any[]): void {\n\t\tconst copy = [LOG_PREFIX, ...rest];\n\n\t\tfor (const i in copy) {\n\t\t\tif (copy[i] instanceof Error) {\n\t\t\t\tcopy[i] = \"(\" + copy[i].name + \") \" + copy[i].message;\n\t\t\t}\n\t\t}\n\n\t\tif (logLevel >= LogLevel.All) {\n\t\t\tconsole.log(...copy);\n\t\t} else if (logLevel >= LogLevel.Warnings) {\n\t\t\tconsole.warn(\"WARNING\", ...copy);\n\t\t} else if (logLevel >= LogLevel.Errors) {\n\t\t\tconsole.error(\"ERROR\", ...copy);\n\t\t}\n\t}\n}\n\nexport default new Logger();\n","import { EventEmitter } from \"eventemitter3\";\nimport logger from \"./logger\";\nimport { SocketEventType, ServerMessageType } from \"./enums\";\nimport { version } from \"../package.json\";\n\n/**\n * An abstraction on top of WebSockets to provide fastest\n * possible connection for peers.\n */\nexport class Socket extends EventEmitter {\n\tprivate _disconnected: boolean = true;\n\tprivate _id?: string;\n\tprivate _messagesQueue: Array<object> = [];\n\tprivate _socket?: WebSocket;\n\tprivate _wsPingTimer?: any;\n\tprivate readonly _baseUrl: string;\n\n\tconstructor(\n\t\tsecure: any,\n\t\thost: string,\n\t\tport: number,\n\t\tpath: string,\n\t\tkey: string,\n\t\tprivate readonly pingInterval: number = 5000,\n\t) {\n\t\tsuper();\n\n\t\tconst wsProtocol = secure ? \"wss://\" : \"ws://\";\n\n\t\tthis._baseUrl = wsProtocol + host + \":\" + port + path + \"peerjs?key=\" + key;\n\t}\n\n\tstart(id: string, token: string): void {\n\t\tthis._id = id;\n\n\t\tconst wsUrl = `${this._baseUrl}&id=${id}&token=${token}`;\n\n\t\tif (!!this._socket || !this._disconnected) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._socket = new WebSocket(wsUrl + \"&version=\" + version);\n\t\tthis._disconnected = false;\n\n\t\tthis._socket.onmessage = (event) => {\n\t\t\tlet data;\n\n\t\t\ttry {\n\t\t\t\tdata = JSON.parse(event.data);\n\t\t\t\tlogger.log(\"Server message received:\", data);\n\t\t\t} catch (e) {\n\t\t\t\tlogger.log(\"Invalid server message\", event.data);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.emit(SocketEventType.Message, data);\n\t\t};\n\n\t\tthis._socket.onclose = (event) => {\n\t\t\tif (this._disconnected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.log(\"Socket closed.\", event);\n\n\t\t\tthis._cleanup();\n\t\t\tthis._disconnected = true;\n\n\t\t\tthis.emit(SocketEventType.Disconnected);\n\t\t};\n\n\t\t// Take care of the queue of connections if necessary and make sure Peer knows\n\t\t// socket is open.\n\t\tthis._socket.onopen = () => {\n\t\t\tif (this._disconnected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._sendQueuedMessages();\n\n\t\t\tlogger.log(\"Socket open\");\n\n\t\t\tthis._scheduleHeartbeat();\n\t\t};\n\t}\n\n\tprivate _scheduleHeartbeat(): void {\n\t\tthis._wsPingTimer = setTimeout(() => {\n\t\t\tthis._sendHeartbeat();\n\t\t}, this.pingInterval);\n\t}\n\n\tprivate _sendHeartbeat(): void {\n\t\tif (!this._wsOpen()) {\n\t\t\tlogger.log(`Cannot send heartbeat, because socket closed`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = JSON.stringify({ type: ServerMessageType.Heartbeat });\n\n\t\tthis._socket!.send(message);\n\n\t\tthis._scheduleHeartbeat();\n\t}\n\n\t/** Is the websocket currently open? */\n\tprivate _wsOpen(): boolean {\n\t\treturn !!this._socket && this._socket.readyState === 1;\n\t}\n\n\t/** Send queued messages. */\n\tprivate _sendQueuedMessages(): void {\n\t\t//Create copy of queue and clear it,\n\t\t//because send method push the message back to queue if smth will go wrong\n\t\tconst copiedQueue = [...this._messagesQueue];\n\t\tthis._messagesQueue = [];\n\n\t\tfor (const message of copiedQueue) {\n\t\t\tthis.send(message);\n\t\t}\n\t}\n\n\t/** Exposed send for DC & Peer. */\n\tsend(data: any): void {\n\t\tif (this._disconnected) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If we didn't get an ID yet, we can't yet send anything so we should queue\n\t\t// up these messages.\n\t\tif (!this._id) {\n\t\t\tthis._messagesQueue.push(data);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!data.type) {\n\t\t\tthis.emit(SocketEventType.Error, \"Invalid message\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._wsOpen()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = JSON.stringify(data);\n\n\t\tthis._socket!.send(message);\n\t}\n\n\tclose(): void {\n\t\tif (this._disconnected) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._cleanup();\n\n\t\tthis._disconnected = true;\n\t}\n\n\tprivate _cleanup(): void {\n\t\tif (this._socket) {\n\t\t\tthis._socket.onopen =\n\t\t\t\tthis._socket.onmessage =\n\t\t\t\tthis._socket.onclose =\n\t\t\t\t\tnull;\n\t\t\tthis._socket.close();\n\t\t\tthis._socket = undefined;\n\t\t}\n\n\t\tclearTimeout(this._wsPingTimer!);\n\t}\n}\n","export enum ConnectionType {\n\tData = \"data\",\n\tMedia = \"media\",\n}\n\nexport enum PeerErrorType {\n\t/**\n\t * The client's browser does not support some or all WebRTC features that you are trying to use.\n\t */\n\tBrowserIncompatible = \"browser-incompatible\",\n\t/**\n\t * You've already disconnected this peer from the server and can no longer make any new connections on it.\n\t */\n\tDisconnected = \"disconnected\",\n\t/**\n\t * The ID passed into the Peer constructor contains illegal characters.\n\t */\n\tInvalidID = \"invalid-id\",\n\t/**\n\t * The API key passed into the Peer constructor contains illegal characters or is not in the system (cloud server only).\n\t */\n\tInvalidKey = \"invalid-key\",\n\t/**\n\t * Lost or cannot establish a connection to the signalling server.\n\t */\n\tNetwork = \"network\",\n\t/**\n\t * The peer you're trying to connect to does not exist.\n\t */\n\tPeerUnavailable = \"peer-unavailable\",\n\t/**\n\t * PeerJS is being used securely, but the cloud server does not support SSL. Use a custom PeerServer.\n\t */\n\tSslUnavailable = \"ssl-unavailable\",\n\t/**\n\t * Unable to reach the server.\n\t */\n\tServerError = \"server-error\",\n\t/**\n\t * An error from the underlying socket.\n\t */\n\tSocketError = \"socket-error\",\n\t/**\n\t * The underlying socket closed unexpectedly.\n\t */\n\tSocketClosed = \"socket-closed\",\n\t/**\n\t * The ID passed into the Peer constructor is already taken.\n\t *\n\t * :::caution\n\t * This error is not fatal if your peer has open peer-to-peer connections.\n\t * This can happen if you attempt to {@apilink Peer.reconnect} a peer that has been disconnected from the server,\n\t * but its old ID has now been taken.\n\t * :::\n\t */\n\tUnavailableID = \"unavailable-id\",\n\t/**\n\t * Native WebRTC errors.\n\t */\n\tWebRTC = \"webrtc\",\n}\n\nexport enum SerializationType {\n\tBinary = \"binary\",\n\tBinaryUTF8 = \"binary-utf8\",\n\tJSON = \"json\",\n}\n\nexport enum SocketEventType {\n\tMessage = \"message\",\n\tDisconnected = \"disconnected\",\n\tError = \"error\",\n\tClose = \"close\",\n}\n\nexport enum ServerMessageType {\n\tHeartbeat = \"HEARTBEAT\",\n\tCandidate = \"CANDIDATE\",\n\tOffer = \"OFFER\",\n\tAnswer = \"ANSWER\",\n\tOpen = \"OPEN\", // The connection to the server is open.\n\tError = \"ERROR\", // Server error.\n\tIdTaken = \"ID-TAKEN\", // The selected ID is taken.\n\tInvalidKey = \"INVALID-KEY\", // The given API key cannot be found.\n\tLeave = \"LEAVE\", // Another peer has closed its connection to this peer.\n\tExpire = \"EXPIRE\", // The offer sent to a peer has expired without response.\n}\n","{\n\t\"name\": \"peerjs\",\n\t\"version\": \"1.4.7\",\n\t\"keywords\": [\n\t\t\"peerjs\",\n\t\t\"webrtc\",\n\t\t\"p2p\",\n\t\t\"rtc\"\n\t],\n\t\"description\": \"PeerJS client\",\n\t\"homepage\": \"https://peerjs.com\",\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/peers/peerjs/issues\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/peers/peerjs\"\n\t},\n\t\"license\": \"MIT\",\n\t\"contributors\": [\n\t\t\"Michelle Bu <michelle@michellebu.com>\",\n\t\t\"afrokick <devbyru@gmail.com>\",\n\t\t\"ericz <really.ez@gmail.com>\",\n\t\t\"Jairo <kidandcat@gmail.com>\",\n\t\t\"Jonas Gloning <34194370+jonasgloning@users.noreply.github.com>\",\n\t\t\"Jairo Caro-Accino Viciana <jairo@galax.be>\",\n\t\t\"Carlos Caballero <carlos.caballero.gonzalez@gmail.com>\",\n\t\t\"hc <hheennrryy@gmail.com>\",\n\t\t\"Muhammad Asif <capripio@gmail.com>\",\n\t\t\"PrashoonB <prashoonbhattacharjee@gmail.com>\",\n\t\t\"Harsh Bardhan Mishra <47351025+HarshCasper@users.noreply.github.com>\",\n\t\t\"akotynski <aleksanderkotbury@gmail.com>\",\n\t\t\"lmb <i@lmb.io>\",\n\t\t\"Jairooo <jairocaro@msn.com>\",\n\t\t\"Moritz Stückler <moritz.stueckler@gmail.com>\",\n\t\t\"Simon <crydotsnakegithub@gmail.com>\",\n\t\t\"Denis Lukov <denismassters@gmail.com>\",\n\t\t\"Philipp Hancke <fippo@andyet.net>\",\n\t\t\"Hans Oksendahl <hansoksendahl@gmail.com>\",\n\t\t\"Jess <jessachandler@gmail.com>\",\n\t\t\"khankuan <khankuan@gmail.com>\",\n\t\t\"DUODVK <kurmanov.work@gmail.com>\",\n\t\t\"XiZhao <kwang1imsa@gmail.com>\",\n\t\t\"Matthias Lohr <matthias@lohr.me>\",\n\t\t\"=frank tree <=frnktrb@googlemail.com>\",\n\t\t\"Andre Eckardt <aeckardt@outlook.com>\",\n\t\t\"Chris Cowan <agentme49@gmail.com>\",\n\t\t\"Alex Chuev <alex@chuev.com>\",\n\t\t\"alxnull <alxnull@e.mail.de>\",\n\t\t\"Yemel Jardi <angel.jardi@gmail.com>\",\n\t\t\"Ben Parnell <benjaminparnell.94@gmail.com>\",\n\t\t\"Benny Lichtner <bennlich@gmail.com>\",\n\t\t\"fresheneesz <bitetrudpublic@gmail.com>\",\n\t\t\"bob.barstead@exaptive.com <bob.barstead@exaptive.com>\",\n\t\t\"chandika <chandika@gmail.com>\",\n\t\t\"emersion <contact@emersion.fr>\",\n\t\t\"Christopher Van <cvan@users.noreply.github.com>\",\n\t\t\"eddieherm <edhermoso@gmail.com>\",\n\t\t\"Eduardo Pinho <enet4mikeenet@gmail.com>\",\n\t\t\"Evandro Zanatta <ezanatta@tray.net.br>\",\n\t\t\"Gardner Bickford <gardner@users.noreply.github.com>\",\n\t\t\"Gian Luca <gianluca.cecchi@cynny.com>\",\n\t\t\"PatrickJS <github@gdi2290.com>\",\n\t\t\"jonnyf <github@jonathanfoss.co.uk>\",\n\t\t\"Hizkia Felix <hizkifw@gmail.com>\",\n\t\t\"Hristo Oskov <hristo.oskov@gmail.com>\",\n\t\t\"Isaac Madwed <i.madwed@gmail.com>\",\n\t\t\"Ilya Konanykhin <ilya.konanykhin@gmail.com>\",\n\t\t\"jasonbarry <jasbarry@me.com>\",\n\t\t\"Jonathan Burke <jonathan.burke.1311@googlemail.com>\",\n\t\t\"Josh Hamit <josh.hamit@gmail.com>\",\n\t\t\"Jordan Austin <jrax86@gmail.com>\",\n\t\t\"Joel Wetzell <jwetzell@yahoo.com>\",\n\t\t\"xizhao <kevin.wang@cloudera.com>\",\n\t\t\"Alberto Torres <kungfoobar@gmail.com>\",\n\t\t\"Jonathan Mayol <mayoljonathan@gmail.com>\",\n\t\t\"Jefferson Felix <me@jsfelix.dev>\",\n\t\t\"Rolf Erik Lekang <me@rolflekang.com>\",\n\t\t\"Kevin Mai-Husan Chia <mhchia@users.noreply.github.com>\",\n\t\t\"Pepijn de Vos <pepijndevos@gmail.com>\",\n\t\t\"JooYoung <qkdlql@naver.com>\",\n\t\t\"Tobias Speicher <rootcommander@gmail.com>\",\n\t\t\"Steve Blaurock <sblaurock@gmail.com>\",\n\t\t\"Kyrylo Shegeda <shegeda@ualberta.ca>\",\n\t\t\"Diwank Singh Tomer <singh@diwank.name>\",\n\t\t\"Sören Balko <Soeren.Balko@gmail.com>\",\n\t\t\"Arpit Solanki <solankiarpit1997@gmail.com>\",\n\t\t\"Yuki Ito <yuki@gnnk.net>\",\n\t\t\"Artur Zayats <zag2art@gmail.com>\"\n\t],\n\t\"funding\": {\n\t\t\"type\": \"opencollective\",\n\t\t\"url\": \"https://opencollective.com/peer\"\n\t},\n\t\"collective\": {\n\t\t\"type\": \"opencollective\",\n\t\t\"url\": \"https://opencollective.com/peer\"\n\t},\n\t\"files\": [\n\t\t\"dist/*\"\n\t],\n\t\"sideEffects\": [\n\t\t\"lib/global.ts\",\n\t\t\"lib/supports.ts\"\n\t],\n\t\"main\": \"dist/bundler.cjs\",\n\t\"module\": \"dist/bundler.mjs\",\n\t\"browser-minified\": \"dist/peerjs.min.js\",\n\t\"browser-unminified\": \"dist/peerjs.js\",\n\t\"types\": \"dist/types.d.ts\",\n\t\"engines\": {\n\t\t\"node\": \">= 10\"\n\t},\n\t\"targets\": {\n\t\t\"types\": {\n\t\t\t\"source\": \"lib/exports.ts\"\n\t\t},\n\t\t\"main\": {\n\t\t\t\"source\": \"lib/exports.ts\",\n\t\t\t\"sourceMap\": {\n\t\t\t\t\"inlineSources\": true\n\t\t\t}\n\t\t},\n\t\t\"module\": {\n\t\t\t\"source\": \"lib/exports.ts\",\n\t\t\t\"includeNodeModules\": [\n\t\t\t\t\"eventemitter3\"\n\t\t\t],\n\t\t\t\"sourceMap\": {\n\t\t\t\t\"inlineSources\": true\n\t\t\t}\n\t\t},\n\t\t\"browser-minified\": {\n\t\t\t\"context\": \"browser\",\n\t\t\t\"outputFormat\": \"global\",\n\t\t\t\"optimize\": true,\n\t\t\t\"engines\": {\n\t\t\t\t\"browsers\": \"cover 99%, not dead\"\n\t\t\t},\n\t\t\t\"source\": \"lib/global.ts\"\n\t\t},\n\t\t\"browser-unminified\": {\n\t\t\t\"context\": \"browser\",\n\t\t\t\"outputFormat\": \"global\",\n\t\t\t\"optimize\": false,\n\t\t\t\"engines\": {\n\t\t\t\t\"browsers\": \"cover 99%, not dead\"\n\t\t\t},\n\t\t\t\"source\": \"lib/global.ts\"\n\t\t}\n\t},\n\t\"scripts\": {\n\t\t\"contributors\": \"git-authors-cli --print=false && prettier --write package.json && git add package.json package-lock.json && git commit -m \\\"chore(contributors): update and sort contributors list\\\"\",\n\t\t\"check\": \"tsc --noEmit\",\n\t\t\"watch\": \"parcel watch\",\n\t\t\"build\": \"rm -rf dist && parcel build\",\n\t\t\"prepublishOnly\": \"npm run build\",\n\t\t\"test\": \"jest\",\n\t\t\"test:watch\": \"jest --watch\",\n\t\t\"coverage\": \"jest --coverage --collectCoverageFrom=\\\"./lib/**\\\"\",\n\t\t\"format\": \"prettier --write .\",\n\t\t\"semantic-release\": \"semantic-release\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@parcel/config-default\": \"^2.8.1\",\n\t\t\"@parcel/packager-ts\": \"^2.8.1\",\n\t\t\"@parcel/transformer-typescript-tsc\": \"^2.8.1\",\n\t\t\"@parcel/transformer-typescript-types\": \"^2.8.1\",\n\t\t\"@semantic-release/changelog\": \"^6.0.1\",\n\t\t\"@semantic-release/git\": \"^10.0.1\",\n\t\t\"@swc/core\": \"^1.3.27\",\n\t\t\"@swc/jest\": \"^0.2.24\",\n\t\t\"jest\": \"^29.3.1\",\n\t\t\"jest-environment-jsdom\": \"^29.3.1\",\n\t\t\"mock-socket\": \"^9.0.0\",\n\t\t\"parcel\": \"^2.8.1\",\n\t\t\"parcel-transformer-tsc-sourcemaps\": \"^1.0.2\",\n\t\t\"prettier\": \"^2.6.2\",\n\t\t\"semantic-release\": \"^20.0.0\",\n\t\t\"typescript\": \"^4.5.5\"\n\t},\n\t\"dependencies\": {\n\t\t\"@swc/helpers\": \"^0.4.0\",\n\t\t\"eventemitter3\": \"^4.0.7\",\n\t\t\"peerjs-js-binarypack\": \"1.0.2\",\n\t\t\"webrtc-adapter\": \"^8.0.0\"\n\t}\n}\n","import { util } from \"./util\";\nimport logger from \"./logger\";\nimport { Negotiator } from \"./negotiator\";\nimport { ConnectionType, ServerMessageType } from \"./enums\";\nimport { Peer } from \"./peer\";\nimport { BaseConnection } from \"./baseconnection\";\nimport { ServerMessage } from \"./servermessage\";\nimport type { AnswerOption } from \"./optionInterfaces\";\n\nexport type MediaConnectionEvents = {\n\t/**\n\t * Emitted when a connection to the PeerServer is established.\n\t *\n\t * ```ts\n\t * mediaConnection.on('stream', (stream) => { ... });\n\t * ```\n\t */\n\tstream: (stream: MediaStream) => void;\n};\n\n/**\n * Wraps WebRTC's media streams.\n * To get one, use {@apilink Peer.call} or listen for the {@apilink PeerEvents | `call`} event.\n */\nexport class MediaConnection extends BaseConnection<MediaConnectionEvents> {\n\tprivate static readonly ID_PREFIX = \"mc_\";\n\n\tprivate _negotiator: Negotiator<MediaConnectionEvents, MediaConnection>;\n\tprivate _localStream: MediaStream;\n\tprivate _remoteStream: MediaStream;\n\n\t/**\n\t * For media connections, this is always 'media'.\n\t */\n\tget type() {\n\t\treturn ConnectionType.Media;\n\t}\n\n\tget localStream(): MediaStream {\n\t\treturn this._localStream;\n\t}\n\tget remoteStream(): MediaStream {\n\t\treturn this._remoteStream;\n\t}\n\n\tconstructor(peerId: string, provider: Peer, options: any) {\n\t\tsuper(peerId, provider, options);\n\n\t\tthis._localStream = this.options._stream;\n\t\tthis.connectionId =\n\t\t\tthis.options.connectionId ||\n\t\t\tMediaConnection.ID_PREFIX + util.randomToken();\n\n\t\tthis._negotiator = new Negotiator(this);\n\n\t\tif (this._localStream) {\n\t\t\tthis._negotiator.startConnection({\n\t\t\t\t_stream: this._localStream,\n\t\t\t\toriginator: true,\n\t\t\t});\n\t\t}\n\t}\n\n\taddStream(remoteStream) {\n\t\tlogger.log(\"Receiving stream\", remoteStream);\n\n\t\tthis._remoteStream = remoteStream;\n\t\tsuper.emit(\"stream\", remoteStream); // Should we call this `open`?\n\t}\n\n\t/**\n\t * @internal\n\t */\n\thandleMessage(message: ServerMessage): void {\n\t\tconst type = message.type;\n\t\tconst payload = message.payload;\n\n\t\tswitch (message.type) {\n\t\t\tcase ServerMessageType.Answer:\n\t\t\t\t// Forward to negotiator\n\t\t\t\tthis._negotiator.handleSDP(type, payload.sdp);\n\t\t\t\tthis._open = true;\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Candidate:\n\t\t\t\tthis._negotiator.handleCandidate(payload.candidate);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.warn(`Unrecognized message type:${type} from peer:${this.peer}`);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * When receiving a {@apilink PeerEvents | `call`} event on a peer, you can call\n\t * `answer` on the media connection provided by the callback to accept the call\n\t * and optionally send your own media stream.\n\n\t *\n\t * @param stream A WebRTC media stream.\n\t * @param options\n\t * @returns\n\t */\n\tanswer(stream?: MediaStream, options: AnswerOption = {}): void {\n\t\tif (this._localStream) {\n\t\t\tlogger.warn(\n\t\t\t\t\"Local stream already exists on this MediaConnection. Are you answering a call twice?\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._localStream = stream;\n\n\t\tif (options && options.sdpTransform) {\n\t\t\tthis.options.sdpTransform = options.sdpTransform;\n\t\t}\n\n\t\tthis._negotiator.startConnection({\n\t\t\t...this.options._payload,\n\t\t\t_stream: stream,\n\t\t});\n\t\t// Retrieve lost messages stored because PeerConnection not set up.\n\t\tconst messages = this.provider._getMessages(this.connectionId);\n\n\t\tfor (const message of messages) {\n\t\t\tthis.handleMessage(message);\n\t\t}\n\n\t\tthis._open = true;\n\t}\n\n\t/**\n\t * Exposed functionality for users.\n\t */\n\n\t/**\n\t * Closes the media connection.\n\t */\n\tclose(): void {\n\t\tif (this._negotiator) {\n\t\t\tthis._negotiator.cleanup();\n\t\t\tthis._negotiator = null;\n\t\t}\n\n\t\tthis._localStream = null;\n\t\tthis._remoteStream = null;\n\n\t\tif (this.provider) {\n\t\t\tthis.provider._removeConnection(this);\n\n\t\t\tthis.provider = null;\n\t\t}\n\n\t\tif (this.options && this.options._stream) {\n\t\t\tthis.options._stream = null;\n\t\t}\n\n\t\tif (!this.open) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._open = false;\n\n\t\tsuper.emit(\"close\");\n\t}\n}\n","import { util } from \"./util\";\nimport logger from \"./logger\";\nimport { MediaConnection } from \"./mediaconnection\";\nimport { DataConnection } from \"./dataconnection\";\nimport { ConnectionType, PeerErrorType, ServerMessageType } from \"./enums\";\nimport { BaseConnection, BaseConnectionEvents } from \"./baseconnection\";\nimport { ValidEventTypes } from \"eventemitter3\";\n\n/**\n * Manages all negotiations between Peers.\n */\nexport class Negotiator<\n\tA extends ValidEventTypes,\n\tT extends BaseConnection<A | BaseConnectionEvents>,\n> {\n\tconstructor(readonly connection: T) {}\n\n\t/** Returns a PeerConnection object set up correctly (for data, media). */\n\tstartConnection(options: any) {\n\t\tconst peerConnection = this._startPeerConnection();\n\n\t\t// Set the connection's PC.\n\t\tthis.connection.peerConnection = peerConnection;\n\n\t\tif (this.connection.type === ConnectionType.Media && options._stream) {\n\t\t\tthis._addTracksToConnection(options._stream, peerConnection);\n\t\t}\n\n\t\t// What do we need to do now?\n\t\tif (options.originator) {\n\t\t\tif (this.connection.type === ConnectionType.Data) {\n\t\t\t\tconst dataConnection = <DataConnection>(<unknown>this.connection);\n\n\t\t\t\tconst config: RTCDataChannelInit = { ordered: !!options.reliable };\n\n\t\t\t\tconst dataChannel = peerConnection.createDataChannel(\n\t\t\t\t\tdataConnection.label,\n\t\t\t\t\tconfig,\n\t\t\t\t);\n\t\t\t\tdataConnection.initialize(dataChannel);\n\t\t\t}\n\n\t\t\tthis._makeOffer();\n\t\t} else {\n\t\t\tthis.handleSDP(\"OFFER\", options.sdp);\n\t\t}\n\t}\n\n\t/** Start a PC. */\n\tprivate _startPeerConnection(): RTCPeerConnection {\n\t\tlogger.log(\"Creating RTCPeerConnection.\");\n\n\t\tconst peerConnection = new RTCPeerConnection(\n\t\t\tthis.connection.provider.options.config,\n\t\t);\n\n\t\tthis._setupListeners(peerConnection);\n\n\t\treturn peerConnection;\n\t}\n\n\t/** Set up various WebRTC listeners. */\n\tprivate _setupListeners(peerConnection: RTCPeerConnection) {\n\t\tconst peerId = this.connection.peer;\n\t\tconst connectionId = this.connection.connectionId;\n\t\tconst connectionType = this.connection.type;\n\t\tconst provider = this.connection.provider;\n\n\t\t// ICE CANDIDATES.\n\t\tlogger.log(\"Listening for ICE candidates.\");\n\n\t\tpeerConnection.onicecandidate = (evt) => {\n\t\t\tif (!evt.candidate || !evt.candidate.candidate) return;\n\n\t\t\tlogger.log(`Received ICE candidates for ${peerId}:`, evt.candidate);\n\n\t\t\tprovider.socket.send({\n\t\t\t\ttype: ServerMessageType.Candidate,\n\t\t\t\tpayload: {\n\t\t\t\t\tcandidate: evt.candidate,\n\t\t\t\t\ttype: connectionType,\n\t\t\t\t\tconnectionId: connectionId,\n\t\t\t\t},\n\t\t\t\tdst: peerId,\n\t\t\t});\n\t\t};\n\n\t\tpeerConnection.oniceconnectionstatechange = () => {\n\t\t\tswitch (peerConnection.iceConnectionState) {\n\t\t\t\tcase \"failed\":\n\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t\"iceConnectionState is failed, closing connections to \" + peerId,\n\t\t\t\t\t);\n\t\t\t\t\tthis.connection.emit(\n\t\t\t\t\t\t\"error\",\n\t\t\t\t\t\tnew Error(\"Negotiation of connection to \" + peerId + \" failed.\"),\n\t\t\t\t\t);\n\t\t\t\t\tthis.connection.close();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"closed\":\n\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t\"iceConnectionState is closed, closing connections to \" + peerId,\n\t\t\t\t\t);\n\t\t\t\t\tthis.connection.emit(\n\t\t\t\t\t\t\"error\",\n\t\t\t\t\t\tnew Error(\"Connection to \" + peerId + \" closed.\"),\n\t\t\t\t\t);\n\t\t\t\t\tthis.connection.close();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"disconnected\":\n\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t\"iceConnectionState changed to disconnected on the connection with \" +\n\t\t\t\t\t\t\tpeerId,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"completed\":\n\t\t\t\t\tpeerConnection.onicecandidate = util.noop;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.connection.emit(\n\t\t\t\t\"iceStateChanged\",\n\t\t\t\tpeerConnection.iceConnectionState,\n\t\t\t);\n\t\t};\n\n\t\t// DATACONNECTION.\n\t\tlogger.log(\"Listening for data channel\");\n\t\t// Fired between offer and answer, so options should already be saved\n\t\t// in the options hash.\n\t\tpeerConnection.ondatachannel = (evt) => {\n\t\t\tlogger.log(\"Received data channel\");\n\n\t\t\tconst dataChannel = evt.channel;\n\t\t\tconst connection = <DataConnection>(\n\t\t\t\tprovider.getConnection(peerId, connectionId)\n\t\t\t);\n\n\t\t\tconnection.initialize(dataChannel);\n\t\t};\n\n\t\t// MEDIACONNECTION.\n\t\tlogger.log(\"Listening for remote stream\");\n\n\t\tpeerConnection.ontrack = (evt) => {\n\t\t\tlogger.log(\"Received remote stream\");\n\n\t\t\tconst stream = evt.streams[0];\n\t\t\tconst connection = provider.getConnection(peerId, connectionId);\n\n\t\t\tif (connection.type === ConnectionType.Media) {\n\t\t\t\tconst mediaConnection = <MediaConnection>connection;\n\n\t\t\t\tthis._addStreamToMediaConnection(stream, mediaConnection);\n\t\t\t}\n\t\t};\n\t}\n\n\tcleanup(): void {\n\t\tlogger.log(\"Cleaning up PeerConnection to \" + this.connection.peer);\n\n\t\tconst peerConnection = this.connection.peerConnection;\n\n\t\tif (!peerConnection) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.connection.peerConnection = null;\n\n\t\t//unsubscribe from all PeerConnection's events\n\t\tpeerConnection.onicecandidate =\n\t\t\tpeerConnection.oniceconnectionstatechange =\n\t\t\tpeerConnection.ondatachannel =\n\t\t\tpeerConnection.ontrack =\n\t\t\t\t() => {};\n\n\t\tconst peerConnectionNotClosed = peerConnection.signalingState !== \"closed\";\n\t\tlet dataChannelNotClosed = false;\n\n\t\tif (this.connection.type === ConnectionType.Data) {\n\t\t\tconst dataConnection = <DataConnection>(<unknown>this.connection);\n\t\t\tconst dataChannel = dataConnection.dataChannel;\n\n\t\t\tif (dataChannel) {\n\t\t\t\tdataChannelNotClosed =\n\t\t\t\t\t!!dataChannel.readyState && dataChannel.readyState !== \"closed\";\n\t\t\t}\n\t\t}\n\n\t\tif (peerConnectionNotClosed || dataChannelNotClosed) {\n\t\t\tpeerConnection.close();\n\t\t}\n\t}\n\n\tprivate async _makeOffer(): Promise<void> {\n\t\tconst peerConnection = this.connection.peerConnection;\n\t\tconst provider = this.connection.provider;\n\n\t\ttry {\n\t\t\tconst offer = await peerConnection.createOffer(\n\t\t\t\tthis.connection.options.constraints,\n\t\t\t);\n\n\t\t\tlogger.log(\"Created offer.\");\n\n\t\t\tif (\n\t\t\t\tthis.connection.options.sdpTransform &&\n\t\t\t\ttypeof this.connection.options.sdpTransform === \"function\"\n\t\t\t) {\n\t\t\t\toffer.sdp =\n\t\t\t\t\tthis.connection.options.sdpTransform(offer.sdp) || offer.sdp;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait peerConnection.setLocalDescription(offer);\n\n\t\t\t\tlogger.log(\n\t\t\t\t\t\"Set localDescription:\",\n\t\t\t\t\toffer,\n\t\t\t\t\t`for:${this.connection.peer}`,\n\t\t\t\t);\n\n\t\t\t\tlet payload: any = {\n\t\t\t\t\tsdp: offer,\n\t\t\t\t\ttype: this.connection.type,\n\t\t\t\t\tconnectionId: this.connection.connectionId,\n\t\t\t\t\tmetadata: this.connection.metadata,\n\t\t\t\t\tbrowser: util.browser,\n\t\t\t\t};\n\n\t\t\t\tif (this.connection.type === ConnectionType.Data) {\n\t\t\t\t\tconst dataConnection = <DataConnection>(<unknown>this.connection);\n\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\t...payload,\n\t\t\t\t\t\tlabel: dataConnection.label,\n\t\t\t\t\t\treliable: dataConnection.reliable,\n\t\t\t\t\t\tserialization: dataConnection.serialization,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tprovider.socket.send({\n\t\t\t\t\ttype: ServerMessageType.Offer,\n\t\t\t\t\tpayload,\n\t\t\t\t\tdst: this.connection.peer,\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\t// TODO: investigate why _makeOffer is being called from the answer\n\t\t\t\tif (\n\t\t\t\t\terr !=\n\t\t\t\t\t\"OperationError: Failed to set local offer sdp: Called in wrong state: kHaveRemoteOffer\"\n\t\t\t\t) {\n\t\t\t\t\tprovider.emitError(PeerErrorType.WebRTC, err);\n\t\t\t\t\tlogger.log(\"Failed to setLocalDescription, \", err);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err_1) {\n\t\t\tprovider.emitError(PeerErrorType.WebRTC, err_1);\n\t\t\tlogger.log(\"Failed to createOffer, \", err_1);\n\t\t}\n\t}\n\n\tprivate async _makeAnswer(): Promise<void> {\n\t\tconst peerConnection = this.connection.peerConnection;\n\t\tconst provider = this.connection.provider;\n\n\t\ttry {\n\t\t\tconst answer = await peerConnection.createAnswer();\n\t\t\tlogger.log(\"Created answer.\");\n\n\t\t\tif (\n\t\t\t\tthis.connection.options.sdpTransform &&\n\t\t\t\ttypeof this.connection.options.sdpTransform === \"function\"\n\t\t\t) {\n\t\t\t\tanswer.sdp =\n\t\t\t\t\tthis.connection.options.sdpTransform(answer.sdp) || answer.sdp;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait peerConnection.setLocalDescription(answer);\n\n\t\t\t\tlogger.log(\n\t\t\t\t\t`Set localDescription:`,\n\t\t\t\t\tanswer,\n\t\t\t\t\t`for:${this.connection.peer}`,\n\t\t\t\t);\n\n\t\t\t\tprovider.socket.send({\n\t\t\t\t\ttype: ServerMessageType.Answer,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tsdp: answer,\n\t\t\t\t\t\ttype: this.connection.type,\n\t\t\t\t\t\tconnectionId: this.connection.connectionId,\n\t\t\t\t\t\tbrowser: util.browser,\n\t\t\t\t\t},\n\t\t\t\t\tdst: this.connection.peer,\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tprovider.emitError(PeerErrorType.WebRTC, err);\n\t\t\t\tlogger.log(\"Failed to setLocalDescription, \", err);\n\t\t\t}\n\t\t} catch (err_1) {\n\t\t\tprovider.emitError(PeerErrorType.WebRTC, err_1);\n\t\t\tlogger.log(\"Failed to create answer, \", err_1);\n\t\t}\n\t}\n\n\t/** Handle an SDP. */\n\tasync handleSDP(type: string, sdp: any): Promise<void> {\n\t\tsdp = new RTCSessionDescription(sdp);\n\t\tconst peerConnection = this.connection.peerConnection;\n\t\tconst provider = this.connection.provider;\n\n\t\tlogger.log(\"Setting remote description\", sdp);\n\n\t\tconst self = this;\n\n\t\ttry {\n\t\t\tawait peerConnection.setRemoteDescription(sdp);\n\t\t\tlogger.log(`Set remoteDescription:${type} for:${this.connection.peer}`);\n\t\t\tif (type === \"OFFER\") {\n\t\t\t\tawait self._makeAnswer();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tprovider.emitError(PeerErrorType.WebRTC, err);\n\t\t\tlogger.log(\"Failed to setRemoteDescription, \", err);\n\t\t}\n\t}\n\n\t/** Handle a candidate. */\n\tasync handleCandidate(ice: any): Promise<void> {\n\t\tlogger.log(`handleCandidate:`, ice);\n\n\t\tconst candidate = ice.candidate;\n\t\tconst sdpMLineIndex = ice.sdpMLineIndex;\n\t\tconst sdpMid = ice.sdpMid;\n\t\tconst peerConnection = this.connection.peerConnection;\n\t\tconst provider = this.connection.provider;\n\n\t\ttry {\n\t\t\tawait peerConnection.addIceCandidate(\n\t\t\t\tnew RTCIceCandidate({\n\t\t\t\t\tsdpMid: sdpMid,\n\t\t\t\t\tsdpMLineIndex: sdpMLineIndex,\n\t\t\t\t\tcandidate: candidate,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tlogger.log(`Added ICE candidate for:${this.connection.peer}`);\n\t\t} catch (err) {\n\t\t\tprovider.emitError(PeerErrorType.WebRTC, err);\n\t\t\tlogger.log(\"Failed to handleCandidate, \", err);\n\t\t}\n\t}\n\n\tprivate _addTracksToConnection(\n\t\tstream: MediaStream,\n\t\tpeerConnection: RTCPeerConnection,\n\t): void {\n\t\tlogger.log(`add tracks from stream ${stream.id} to peer connection`);\n\n\t\tif (!peerConnection.addTrack) {\n\t\t\treturn logger.error(\n\t\t\t\t`Your browser does't support RTCPeerConnection#addTrack. Ignored.`,\n\t\t\t);\n\t\t}\n\n\t\tstream.getTracks().forEach((track) => {\n\t\t\tpeerConnection.addTrack(track, stream);\n\t\t});\n\t}\n\n\tprivate _addStreamToMediaConnection(\n\t\tstream: MediaStream,\n\t\tmediaConnection: MediaConnection,\n\t): void {\n\t\tlogger.log(\n\t\t\t`add stream ${stream.id} to media connection ${mediaConnection.connectionId}`,\n\t\t);\n\n\t\tmediaConnection.addStream(stream);\n\t}\n}\n","import { EventEmitter, ValidEventTypes } from \"eventemitter3\";\nimport { Peer } from \"./peer\";\nimport { ServerMessage } from \"./servermessage\";\nimport { ConnectionType } from \"./enums\";\n\nexport type BaseConnectionEvents = {\n\t/**\n\t * Emitted when either you or the remote peer closes the connection.\n\t *\n\t * ```ts\n\t * connection.on('close', () => { ... });\n\t * ```\n\t */\n\tclose: () => void;\n\t/**\n\t * ```ts\n\t * connection.on('error', (error) => { ... });\n\t * ```\n\t */\n\terror: (error: Error) => void;\n\ticeStateChanged: (state: RTCIceConnectionState) => void;\n};\n\nexport abstract class BaseConnection<\n\tT extends ValidEventTypes,\n> extends EventEmitter<T & BaseConnectionEvents> {\n\tprotected _open = false;\n\n\t/**\n\t * Any type of metadata associated with the connection,\n\t * passed in by whoever initiated the connection.\n\t */\n\treadonly metadata: any;\n\tconnectionId: string;\n\n\tpeerConnection: RTCPeerConnection;\n\n\tabstract get type(): ConnectionType;\n\n\t/**\n\t * Whether the media connection is active (e.g. your call has been answered).\n\t * You can check this if you want to set a maximum wait time for a one-sided call.\n\t */\n\tget open() {\n\t\treturn this._open;\n\t}\n\n\tconstructor(\n\t\t/**\n\t\t * The ID of the peer on the other end of this connection.\n\t\t */\n\t\treadonly peer: string,\n\t\tpublic provider: Peer,\n\t\treadonly options: any,\n\t) {\n\t\tsuper();\n\n\t\tthis.metadata = options.metadata;\n\t}\n\n\tabstract close(): void;\n\n\t/**\n\t * @internal\n\t */\n\tabstract handleMessage(message: ServerMessage): void;\n}\n","import { util } from \"./util\";\nimport logger from \"./logger\";\nimport { Negotiator } from \"./negotiator\";\nimport { ConnectionType, SerializationType, ServerMessageType } from \"./enums\";\nimport { Peer } from \"./peer\";\nimport { BaseConnection } from \"./baseconnection\";\nimport { ServerMessage } from \"./servermessage\";\nimport { EncodingQueue } from \"./encodingQueue\";\nimport type { DataConnection as IDataConnection } from \"./dataconnection\";\n\nexport type DataConnectionEvents = {\n\t/**\n\t * Emitted when data is received from the remote peer.\n\t *\n\t * ```ts\n\t * dataConnection.on('data', (data) => { ... });\n\t * ```\n\t */\n\tdata: (data: unknown) => void;\n\t/**\n\t * Emitted when the connection is established and ready-to-use.\n\t *\n\t * ```ts\n\t * dataConnection.on('open', () => { ... });\n\t * ```\n\t */\n\topen: () => void;\n};\n\n/**\n * Wraps WebRTC's DataChannel.\n * To get one, use {@apilink Peer.connect} or listen for the {@apilink PeerEvents | `connect`} event.\n */\nexport class DataConnection\n\textends BaseConnection<DataConnectionEvents>\n\timplements IDataConnection\n{\n\tprivate static readonly ID_PREFIX = \"dc_\";\n\tprivate static readonly MAX_BUFFERED_AMOUNT = 8 * 1024 * 1024;\n\n\tprivate _negotiator: Negotiator<DataConnectionEvents, DataConnection>;\n\t/**\n\t * The optional label passed in or assigned by PeerJS when the connection was initiated.\n\t */\n\treadonly label: string;\n\t/**\n\t * The serialization format of the data sent over the connection.\n\t * {@apilink SerializationType | possible values}\n\t */\n\treadonly serialization: SerializationType;\n\t/**\n\t * Whether the underlying data channels are reliable; defined when the connection was initiated.\n\t */\n\treadonly reliable: boolean;\n\tstringify: (data: any) => string = JSON.stringify;\n\tparse: (data: string) => any = JSON.parse;\n\n\tget type() {\n\t\treturn ConnectionType.Data;\n\t}\n\n\tprivate _buffer: any[] = [];\n\t/**\n\t * The number of messages queued to be sent once the browser buffer is no longer full.\n\t */\n\tprivate _bufferSize = 0;\n\tprivate _buffering = false;\n\tprivate _chunkedData: {\n\t\t[id: number]: {\n\t\t\tdata: Blob[];\n\t\t\tcount: number;\n\t\t\ttotal: number;\n\t\t};\n\t} = {};\n\n\tprivate _dc: RTCDataChannel;\n\tprivate _encodingQueue = new EncodingQueue();\n\n\t/**\n\t * A reference to the RTCDataChannel object associated with the connection.\n\t */\n\tget dataChannel(): RTCDataChannel {\n\t\treturn this._dc;\n\t}\n\n\tget bufferSize(): number {\n\t\treturn this._bufferSize;\n\t}\n\n\tconstructor(peerId: string, provider: Peer, options: any) {\n\t\tsuper(peerId, provider, options);\n\n\t\tthis.connectionId =\n\t\t\tthis.options.connectionId ||\n\t\t\tDataConnection.ID_PREFIX + util.randomToken();\n\n\t\tthis.label = this.options.label || this.connectionId;\n\t\tthis.serialization = this.options.serialization || SerializationType.Binary;\n\t\tthis.reliable = !!this.options.reliable;\n\n\t\tthis._encodingQueue.on(\"done\", (ab: ArrayBuffer) => {\n\t\t\tthis._bufferedSend(ab);\n\t\t});\n\n\t\tthis._encodingQueue.on(\"error\", () => {\n\t\t\tlogger.error(\n\t\t\t\t`DC#${this.connectionId}: Error occured in encoding from blob to arraybuffer, close DC`,\n\t\t\t);\n\t\t\tthis.close();\n\t\t});\n\n\t\tthis._negotiator = new Negotiator(this);\n\n\t\tthis._negotiator.startConnection(\n\t\t\tthis.options._payload || {\n\t\t\t\toriginator: true,\n\t\t\t},\n\t\t);\n\t}\n\n\t/** Called by the Negotiator when the DataChannel is ready. */\n\tinitialize(dc: RTCDataChannel): void {\n\t\tthis._dc = dc;\n\t\tthis._configureDataChannel();\n\t}\n\n\tprivate _configureDataChannel(): void {\n\t\tif (!util.supports.binaryBlob || util.supports.reliable) {\n\t\t\tthis.dataChannel.binaryType = \"arraybuffer\";\n\t\t}\n\n\t\tthis.dataChannel.onopen = () => {\n\t\t\tlogger.log(`DC#${this.connectionId} dc connection success`);\n\t\t\tthis._open = true;\n\t\t\tthis.emit(\"open\");\n\t\t};\n\n\t\tthis.dataChannel.onmessage = (e) => {\n\t\t\tlogger.log(`DC#${this.connectionId} dc onmessage:`, e.data);\n\t\t\tthis._handleDataMessage(e);\n\t\t};\n\n\t\tthis.dataChannel.onclose = () => {\n\t\t\tlogger.log(`DC#${this.connectionId} dc closed for:`, this.peer);\n\t\t\tthis.close();\n\t\t};\n\t}\n\n\t// Handles a DataChannel message.\n\tprivate _handleDataMessage({\n\t\tdata,\n\t}: {\n\t\tdata: Blob | ArrayBuffer | string;\n\t}): void {\n\t\tconst datatype = data.constructor;\n\n\t\tconst isBinarySerialization =\n\t\t\tthis.serialization === SerializationType.Binary ||\n\t\t\tthis.serialization === SerializationType.BinaryUTF8;\n\n\t\tlet deserializedData: any = data;\n\n\t\tif (isBinarySerialization) {\n\t\t\tif (datatype === Blob) {\n\t\t\t\t// Datatype should never be blob\n\t\t\t\tutil.blobToArrayBuffer(data as Blob, (ab) => {\n\t\t\t\t\tconst unpackedData = util.unpack(ab);\n\t\t\t\t\tthis.emit(\"data\", unpackedData);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} else if (datatype === ArrayBuffer) {\n\t\t\t\tdeserializedData = util.unpack(data as ArrayBuffer);\n\t\t\t} else if (datatype === String) {\n\t\t\t\t// String fallback for binary data for browsers that don't support binary yet\n\t\t\t\tconst ab = util.binaryStringToArrayBuffer(data as string);\n\t\t\t\tdeserializedData = util.unpack(ab);\n\t\t\t}\n\t\t} else if (this.serialization === SerializationType.JSON) {\n\t\t\tdeserializedData = this.parse(data as string);\n\t\t}\n\n\t\t// Check if we've chunked--if so, piece things back together.\n\t\t// We're guaranteed that this isn't 0.\n\t\tif (deserializedData.__peerData) {\n\t\t\tthis._handleChunk(deserializedData);\n\t\t\treturn;\n\t\t}\n\n\t\tsuper.emit(\"data\", deserializedData);\n\t}\n\n\tprivate _handleChunk(data: {\n\t\t__peerData: number;\n\t\tn: number;\n\t\ttotal: number;\n\t\tdata: Blob;\n\t}): void {\n\t\tconst id = data.__peerData;\n\t\tconst chunkInfo = this._chunkedData[id] || {\n\t\t\tdata: [],\n\t\t\tcount: 0,\n\t\t\ttotal: data.total,\n\t\t};\n\n\t\tchunkInfo.data[data.n] = data.data;\n\t\tchunkInfo.count++;\n\t\tthis._chunkedData[id] = chunkInfo;\n\n\t\tif (chunkInfo.total === chunkInfo.count) {\n\t\t\t// Clean up before making the recursive call to `_handleDataMessage`.\n\t\t\tdelete this._chunkedData[id];\n\n\t\t\t// We've received all the chunks--time to construct the complete data.\n\t\t\tconst data = new Blob(chunkInfo.data);\n\t\t\tthis._handleDataMessage({ data });\n\t\t}\n\t}\n\n\t/**\n\t * Exposed functionality for users.\n\t */\n\n\t/** Allows user to close connection. */\n\tclose(): void {\n\t\tthis._buffer = [];\n\t\tthis._bufferSize = 0;\n\t\tthis._chunkedData = {};\n\n\t\tif (this._negotiator) {\n\t\t\tthis._negotiator.cleanup();\n\t\t\tthis._negotiator = null;\n\t\t}\n\n\t\tif (this.provider) {\n\t\t\tthis.provider._removeConnection(this);\n\n\t\t\tthis.provider = null;\n\t\t}\n\n\t\tif (this.dataChannel) {\n\t\t\tthis.dataChannel.onopen = null;\n\t\t\tthis.dataChannel.onmessage = null;\n\t\t\tthis.dataChannel.onclose = null;\n\t\t\tthis._dc = null;\n\t\t}\n\n\t\tif (this._encodingQueue) {\n\t\t\tthis._encodingQueue.destroy();\n\t\t\tthis._encodingQueue.removeAllListeners();\n\t\t\tthis._encodingQueue = null;\n\t\t}\n\n\t\tif (!this.open) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._open = false;\n\n\t\tsuper.emit(\"close\");\n\t}\n\n\t/**\n\t * `data` is serialized and sent to the remote peer.\n\t * @param data You can send any type of data, including objects, strings, and blobs.\n\t * @returns\n\t */\n\tsend(data: any, chunked?: boolean): void {\n\t\tif (!this.open) {\n\t\t\tsuper.emit(\n\t\t\t\t\"error\",\n\t\t\t\tnew Error(\n\t\t\t\t\t\"Connection is not open. You should listen for the `open` event before sending messages.\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.serialization === SerializationType.JSON) {\n\t\t\tthis._bufferedSend(this.stringify(data));\n\t\t} else if (\n\t\t\tthis.serialization === SerializationType.Binary ||\n\t\t\tthis.serialization === SerializationType.BinaryUTF8\n\t\t) {\n\t\t\tconst blob = util.pack(data);\n\n\t\t\tif (!chunked && blob.size > util.chunkedMTU) {\n\t\t\t\tthis._sendChunks(blob);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!util.supports.binaryBlob) {\n\t\t\t\t// We only do this if we really need to (e.g. blobs are not supported),\n\t\t\t\t// because this conversion is costly.\n\t\t\t\tthis._encodingQueue.enque(blob);\n\t\t\t} else {\n\t\t\t\tthis._bufferedSend(blob);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._bufferedSend(data);\n\t\t}\n\t}\n\n\tprivate _bufferedSend(msg: any): void {\n\t\tif (this._buffering || !this._trySend(msg)) {\n\t\t\tthis._buffer.push(msg);\n\t\t\tthis._bufferSize = this._buffer.length;\n\t\t}\n\t}\n\n\t// Returns true if the send succeeds.\n\tprivate _trySend(msg: any): boolean {\n\t\tif (!this.open) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.dataChannel.bufferedAmount > DataConnection.MAX_BUFFERED_AMOUNT) {\n\t\t\tthis._buffering = true;\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._buffering = false;\n\t\t\t\tthis._tryBuffer();\n\t\t\t}, 50);\n\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.dataChannel.send(msg);\n\t\t} catch (e) {\n\t\t\tlogger.error(`DC#:${this.connectionId} Error when sending:`, e);\n\t\t\tthis._buffering = true;\n\n\t\t\tthis.close();\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Try to send the first message in the buffer.\n\tprivate _tryBuffer(): void {\n\t\tif (!this.open) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._buffer.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst msg = this._buffer[0];\n\n\t\tif (this._trySend(msg)) {\n\t\t\tthis._buffer.shift();\n\t\t\tthis._bufferSize = this._buffer.length;\n\t\t\tthis._tryBuffer();\n\t\t}\n\t}\n\n\tprivate _sendChunks(blob: Blob): void {\n\t\tconst blobs = util.chunk(blob);\n\t\tlogger.log(`DC#${this.connectionId} Try to send ${blobs.length} chunks...`);\n\n\t\tfor (const blob of blobs) {\n\t\t\tthis.send(blob, true);\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\thandleMessage(message: ServerMessage): void {\n\t\tconst payload = message.payload;\n\n\t\tswitch (message.type) {\n\t\t\tcase ServerMessageType.Answer:\n\t\t\t\tthis._negotiator.handleSDP(message.type, payload.sdp);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Candidate:\n\t\t\t\tthis._negotiator.handleCandidate(payload.candidate);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.warn(\n\t\t\t\t\t\"Unrecognized message type:\",\n\t\t\t\t\tmessage.type,\n\t\t\t\t\t\"from peer:\",\n\t\t\t\t\tthis.peer,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n","import { EventEmitter } from \"eventemitter3\";\nimport logger from \"./logger\";\n\nexport class EncodingQueue extends EventEmitter {\n\treadonly fileReader: FileReader = new FileReader();\n\n\tprivate _queue: Blob[] = [];\n\tprivate _processing: boolean = false;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.fileReader.onload = (evt) => {\n\t\t\tthis._processing = false;\n\n\t\t\tif (evt.target) {\n\t\t\t\tthis.emit(\"done\", evt.target.result as ArrayBuffer);\n\t\t\t}\n\n\t\t\tthis.doNextTask();\n\t\t};\n\n\t\tthis.fileReader.onerror = (evt) => {\n\t\t\tlogger.error(`EncodingQueue error:`, evt);\n\t\t\tthis._processing = false;\n\t\t\tthis.destroy();\n\t\t\tthis.emit(\"error\", evt);\n\t\t};\n\t}\n\n\tget queue(): Blob[] {\n\t\treturn this._queue;\n\t}\n\n\tget size(): number {\n\t\treturn this.queue.length;\n\t}\n\n\tget processing(): boolean {\n\t\treturn this._processing;\n\t}\n\n\tenque(blob: Blob): void {\n\t\tthis.queue.push(blob);\n\n\t\tif (this.processing) return;\n\n\t\tthis.doNextTask();\n\t}\n\n\tdestroy(): void {\n\t\tthis.fileReader.abort();\n\t\tthis._queue = [];\n\t}\n\n\tprivate doNextTask(): void {\n\t\tif (this.size === 0) return;\n\t\tif (this.processing) return;\n\n\t\tthis._processing = true;\n\n\t\tthis.fileReader.readAsArrayBuffer(this.queue.shift());\n\t}\n}\n","import { util } from \"./util\";\nimport logger from \"./logger\";\nimport { PeerJSOption } from \"./optionInterfaces\";\nimport { version } from \"../package.json\";\n\nexport class API {\n\tconstructor(private readonly _options: PeerJSOption) {}\n\n\tprivate _buildRequest(method: string): Promise<Response> {\n\t\tconst protocol = this._options.secure ? \"https\" : \"http\";\n\t\tconst { host, port, path, key } = this._options;\n\t\tconst url = new URL(`${protocol}://${host}:${port}${path}${key}/${method}`);\n\t\t// TODO: Why timestamp, why random?\n\t\turl.searchParams.set(\"ts\", `${Date.now()}${Math.random()}`);\n\t\turl.searchParams.set(\"version\", version);\n\t\treturn fetch(url.href, {\n\t\t\treferrerPolicy: this._options.referrerPolicy,\n\t\t});\n\t}\n\n\t/** Get a unique ID from the server via XHR and initialize with it. */\n\tasync retrieveId(): Promise<string> {\n\t\ttry {\n\t\t\tconst response = await this._buildRequest(\"id\");\n\n\t\t\tif (response.status !== 200) {\n\t\t\t\tthrow new Error(`Error. Status:${response.status}`);\n\t\t\t}\n\n\t\t\treturn response.text();\n\t\t} catch (error) {\n\t\t\tlogger.error(\"Error retrieving ID\", error);\n\n\t\t\tlet pathError = \"\";\n\n\t\t\tif (\n\t\t\t\tthis._options.path === \"/\" &&\n\t\t\t\tthis._options.host !== util.CLOUD_HOST\n\t\t\t) {\n\t\t\t\tpathError =\n\t\t\t\t\t\" If you passed in a `path` to your self-hosted PeerServer, \" +\n\t\t\t\t\t\"you'll also need to pass in that same path when creating a new \" +\n\t\t\t\t\t\"Peer.\";\n\t\t\t}\n\n\t\t\tthrow new Error(\"Could not get an ID from the server.\" + pathError);\n\t\t}\n\t}\n\n\t/** @deprecated */\n\tasync listAllPeers(): Promise<any[]> {\n\t\ttry {\n\t\t\tconst response = await this._buildRequest(\"peers\");\n\n\t\t\tif (response.status !== 200) {\n\t\t\t\tif (response.status === 401) {\n\t\t\t\t\tlet helpfulError = \"\";\n\n\t\t\t\t\tif (this._options.host === util.CLOUD_HOST) {\n\t\t\t\t\t\thelpfulError =\n\t\t\t\t\t\t\t\"It looks like you're using the cloud server. You can email \" +\n\t\t\t\t\t\t\t\"team@peerjs.com to enable peer listing for your API key.\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\thelpfulError =\n\t\t\t\t\t\t\t\"You need to enable `allow_discovery` on your self-hosted \" +\n\t\t\t\t\t\t\t\"PeerServer to use this feature.\";\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"It doesn't look like you have permission to list peers IDs. \" +\n\t\t\t\t\t\t\thelpfulError,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(`Error. Status:${response.status}`);\n\t\t\t}\n\n\t\t\treturn response.json();\n\t\t} catch (error) {\n\t\t\tlogger.error(\"Error retrieving list peers\", error);\n\n\t\t\tthrow new Error(\"Could not get list peers from the server.\" + error);\n\t\t}\n\t}\n}\n"],"names":[],"version":3,"file":"bundler.mjs.map"}